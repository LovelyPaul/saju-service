This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: ./**/*.md
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
.ruler/
  ruler.toml
docs/
  tdd.mdc
public/
  easynext.png
src/
  app/
    (protected)/
      account/
        page.tsx
      analysis/
        [id]/
          page.tsx
        new/
          components/
            AnalysisForm.tsx
          page.tsx
      dashboard/
        components/
          AnalysesList.tsx
          AnalysisCard.tsx
          EmptyState.tsx
          SearchBar.tsx
        page.tsx
      subscription/
        components/
          CancelSubscriptionButton.tsx
        upgrade/
          components/
            CardPaymentForm.tsx
          page.tsx
        page.tsx
      layout.tsx
    api/
      [[...hono]]/
        route.ts
      analyses/
        create/
          route.ts
      payments/
        card/
          route.ts
      subscription/
        cancel/
          route.ts
      webhooks/
        clerk/
          route.ts
    components/
      FAQSection.tsx
      FeaturesSection.tsx
      HeroSection.tsx
      PricingSection.tsx
    example/
      page.tsx
    login/
      page.tsx
    payment/
      fail/
        page.tsx
      success/
        page.tsx
    sign-in/
      [[...sign-in]]/
        page.tsx
    sign-up/
      [[...sign-up]]/
        page.tsx
    signup/
      page.tsx
    test-user-id/
      page.tsx
    favicon.ico
    globals.css
    layout.tsx
    page.tsx
    providers.tsx
  backend/
    config/
      index.ts
    hono/
      app.ts
      context.ts
    http/
      response.ts
    middleware/
      context.ts
      error.ts
      supabase.ts
    supabase/
      client.ts
  components/
    common/
      ErrorMessage.tsx
      Loading.tsx
    layout/
      Footer.tsx
      Header.tsx
      Sidebar.tsx
    subscription/
      SubscriptionCard.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      dropdown-menu.tsx
      file-upload.tsx
      form.tsx
      input.tsx
      label.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
  constants/
    app.ts
    auth.ts
    env.ts
  features/
    auth/
      context/
        current-user-context.tsx
      hooks/
        useCurrentUser.ts
      server/
        load-current-user.ts
      types.ts
    example/
      backend/
        error.ts
        route.ts
        schema.ts
        service.ts
      components/
        example-status.tsx
      hooks/
        useExampleQuery.ts
      lib/
        dto.ts
  hooks/
    use-toast.ts
  lib/
    clerk/
      config.ts
      helpers.ts
    gemini/
      client.ts
      prompts.ts
    remote/
      api-client.ts
    supabase/
      browser-client.ts
      client.ts
      queries.ts
      server-client.ts
      server.ts
      types.ts
    toss/
      client.ts
    utils.ts
  schemas/
    analysis.ts
    payment.ts
  types/
    analysis.ts
    payment.ts
    user.ts
  utils/
    date.ts
    error.ts
    subscription.ts
  middleware.ts
supabase/
  migrations/
    0001_create_example_table.sql
    0002_create_saju_tables.sql
    0003_insert_test_user.sql
.cursorignore
.gitignore
.npmrc
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
test-gemini.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "enabledMcpjsonServers": [
    "playwright",
    "chrome-devtools"
  ]
}
</file>

<file path="docs/tdd.mdc">
---
description: 
globs: 
alwaysApply: true
---

# TDD Process Guidelines - Cursor Rules

## ⚠️ MANDATORY: Follow these rules for EVERY implementation and modification

**This document defines the REQUIRED process for all code changes. No exceptions without explicit team approval.**

## Core Cycle: Red → Green → Refactor

### 1. RED Phase
- Write a failing test FIRST
- Test the simplest scenario
- Verify test fails for the right reason
- One test at a time

### 2. GREEN Phase  
- Write MINIMAL code to pass
- "Fake it till you make it" is OK
- No premature optimization
- YAGNI principle

### 3. REFACTOR Phase
- Remove duplication
- Improve naming
- Simplify structure
- Keep tests passing

## Test Quality: FIRST Principles
- **Fast**: Milliseconds, not seconds
- **Independent**: No shared state
- **Repeatable**: Same result every time
- **Self-validating**: Pass/fail, no manual checks
- **Timely**: Written just before code

## Test Structure: AAA Pattern
```
// Arrange
Set up test data and dependencies

// Act
Execute the function/method

// Assert
Verify expected outcome
```

## Implementation Flow
1. **List scenarios** before coding
2. **Pick one scenario** → Write test
3. **Run test** → See it fail (Red)
4. **Implement** → Make it pass (Green)
5. **Refactor** → Clean up (Still Green)
6. **Commit** → Small, frequent commits
7. **Repeat** → Next scenario

## Test Pyramid Strategy
- **Unit Tests** (70%): Fast, isolated, numerous
- **Integration Tests** (20%): Module boundaries
- **Acceptance Tests** (10%): User scenarios

## Outside-In vs Inside-Out
- **Outside-In**: Start with user-facing test → Mock internals → Implement details
- **Inside-Out**: Start with core logic → Build outward → Integrate components

## Common Anti-patterns to Avoid
- Testing implementation details
- Fragile tests tied to internals  
- Missing assertions
- Slow, environment-dependent tests
- Ignored failing tests

## When Tests Fail
1. **Identify**: Regression, flaky test, or spec change?
2. **Isolate**: Narrow down the cause
3. **Fix**: Code bug or test bug
4. **Learn**: Add missing test cases

## Team Practices
- CI/CD integration mandatory
- No merge without tests
- Test code = Production code quality
- Pair programming for complex tests
- Regular test refactoring

## Pragmatic Exceptions
- UI/Graphics: Manual + snapshot tests
- Performance: Benchmark suites
- Exploratory: Spike then test
- Legacy: Test on change

## Remember
- Tests are living documentation
- Test behavior, not implementation
- Small steps, fast feedback
- When in doubt, write a test
</file>

<file path="src/app/(protected)/account/page.tsx">
import { UserProfile } from '@clerk/nextjs';

export default function AccountPage() {
  return (
    <div className="container mx-auto max-w-4xl px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">계정 관리</h1>
        <p className="mt-2 text-muted-foreground">
          프로필 정보와 보안 설정을 관리하세요
        </p>
      </div>

      <UserProfile
        appearance={{
          elements: {
            rootBox: 'w-full',
            card: 'shadow-none border',
          },
        }}
      />
    </div>
  );
}
</file>

<file path="src/app/(protected)/analysis/[id]/page.tsx">
import { auth } from '@clerk/nextjs/server';
import { redirect, notFound } from 'next/navigation';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId, getAnalysisById } from '@/lib/supabase/queries';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { formatDate, formatDateTime } from '@/utils/date';
import { User, Calendar, Clock } from 'lucide-react';
import Link from 'next/link';
import ReactMarkdown from 'react-markdown';

interface AnalysisDetailPageProps {
  params: Promise<{ id: string }>;
}

export default async function AnalysisDetailPage({ params }: AnalysisDetailPageProps) {
  const { id } = await params;
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  const supabase = await createClient();
  const user = await getUserByClerkId(supabase, userId);

  if (!user) {
    redirect('/dashboard');
  }

  const analysis = await getAnalysisById(supabase, id, user.id);

  if (!analysis) {
    notFound();
  }

  const genderText = analysis.gender === 'male' ? '남성' : '여성';
  const calendarType = analysis.is_lunar ? '음력' : '양력';
  const modelBadge = analysis.model_used === 'pro' ? 'Pro' : 'Flash';

  return (
    <div className="container mx-auto max-w-4xl px-4 py-8">
      <div className="mb-6">
        <Button asChild variant="outline" size="sm">
          <Link href="/dashboard">← 대시보드로 돌아가기</Link>
        </Button>
      </div>

      {/* Header Card */}
      <Card className="mb-6">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div>
              <CardTitle className="text-2xl">{analysis.name}님의 사주 분석</CardTitle>
              <div className="mt-4 space-y-2 text-sm text-muted-foreground">
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4" />
                  <span>{genderText}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  <span>
                    {formatDate(analysis.birth_date)} ({calendarType})
                    {analysis.birth_time && ` ${analysis.birth_time}`}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  <span>{formatDateTime(analysis.created_at)} 분석</span>
                </div>
              </div>
            </div>
            <Badge variant={analysis.model_used === 'pro' ? 'default' : 'secondary'}>
              Gemini {modelBadge}
            </Badge>
          </div>
        </CardHeader>
      </Card>

      {/* Analysis Result Card */}
      <Card>
        <CardContent className="pt-6">
          <div className="prose prose-slate max-w-none dark:prose-invert">
            <ReactMarkdown>{analysis.analysis_result}</ReactMarkdown>
          </div>
        </CardContent>
      </Card>

      {/* Bottom CTA */}
      <div className="mt-6 flex justify-center">
        <Button asChild size="lg">
          <Link href="/analysis/new">새 분석하기</Link>
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(protected)/dashboard/components/SearchBar.tsx">
'use client';

import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Search, X } from 'lucide-react';
import { useState, useEffect } from 'react';

interface SearchBarProps {
  onSearch: (query: string) => void;
}

export function SearchBar({ onSearch }: SearchBarProps) {
  const [query, setQuery] = useState('');

  // Debounce search
  useEffect(() => {
    const timer = setTimeout(() => {
      onSearch(query);
    }, 300);

    return () => clearTimeout(timer);
  }, [query, onSearch]);

  const handleClear = () => {
    setQuery('');
  };

  return (
    <div className="relative">
      <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
      <Input
        type="text"
        placeholder="이름으로 검색..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        className="pl-10 pr-10"
      />
      {query && (
        <Button
          variant="ghost"
          size="sm"
          onClick={handleClear}
          className="absolute right-1 top-1/2 h-7 w-7 -translate-y-1/2 p-0"
        >
          <X className="h-4 w-4" />
        </Button>
      )}
    </div>
  );
}
</file>

<file path="src/app/(protected)/subscription/components/CancelSubscriptionButton.tsx">
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Loader2 } from 'lucide-react';
import { useRouter } from 'next/navigation';

export function CancelSubscriptionButton() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleCancel = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/subscription/cancel', {
        method: 'POST',
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '구독 취소에 실패했습니다');
      }

      // Refresh the page to show updated status
      router.refresh();
    } catch (err) {
      console.error('구독 취소 오류:', err);
      setError(err instanceof Error ? err.message : '구독 취소에 실패했습니다');
      setIsLoading(false);
    }
  };

  return (
    <>
      <AlertDialog>
        <AlertDialogTrigger asChild>
          <Button variant="destructive" className="w-full">
            구독 취소
          </Button>
        </AlertDialogTrigger>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>정말 구독을 취소하시겠습니까?</AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div className="space-y-2">
                <p>구독을 취소하면:</p>
                <ul className="list-disc list-inside space-y-1 text-sm">
                  <li>현재 구독 기간까지는 Pro 혜택을 이용하실 수 있습니다</li>
                  <li>구독 종료일 이후 무료 요금제로 전환됩니다</li>
                  <li>자동 결제가 중단됩니다</li>
                  <li>언제든지 다시 구독하실 수 있습니다</li>
                </ul>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>계속 사용하기</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleCancel}
              disabled={isLoading}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  취소 중...
                </>
              ) : (
                '구독 취소하기'
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {error && (
        <div className="mt-4 rounded-lg border border-destructive bg-destructive/10 p-4">
          <p className="text-sm text-destructive">{error}</p>
        </div>
      )}
    </>
  );
}
</file>

<file path="src/app/(protected)/subscription/upgrade/components/CardPaymentForm.tsx">
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2 } from 'lucide-react';
import { SUBSCRIPTION } from '@/constants/app';
import { useRouter } from 'next/navigation';

const cardPaymentSchema = z.object({
  cardNumber: z.string()
    .min(15, '카드 번호를 입력해주세요')
    .max(16, '카드 번호는 최대 16자리입니다')
    .regex(/^\d+$/, '숫자만 입력 가능합니다'),
  expiryMonth: z.string()
    .length(2, 'MM 형식으로 입력해주세요')
    .regex(/^(0[1-9]|1[0-2])$/, '01-12 사이의 값을 입력해주세요'),
  expiryYear: z.string()
    .length(2, 'YY 형식으로 입력해주세요')
    .regex(/^\d{2}$/, '숫자 2자리를 입력해주세요'),
  birthOrBusinessNumber: z.string()
    .length(6, '생년월일 6자리를 입력해주세요')
    .regex(/^\d{6}$/, '숫자만 입력 가능합니다'),
  passwordTwoDigits: z.string()
    .length(2, '비밀번호 앞 2자리를 입력해주세요')
    .regex(/^\d{2}$/, '숫자만 입력 가능합니다'),
});

type CardPaymentInput = z.infer<typeof cardPaymentSchema>;

interface CardPaymentFormProps {
  userId: string;
  userEmail: string;
  userName: string;
}

export function CardPaymentForm({ userId, userEmail, userName }: CardPaymentFormProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<CardPaymentInput>({
    resolver: zodResolver(cardPaymentSchema),
    mode: 'onChange',
  });

  const onSubmit = async (data: CardPaymentInput) => {
    setIsSubmitting(true);
    setError(null);

    try {
      // Call API to create billing key and process first payment
      const response = await fetch('/api/payments/card', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          cardNumber: data.cardNumber,
          expiryMonth: data.expiryMonth,
          expiryYear: data.expiryYear,
          birthOrBusinessNumber: data.birthOrBusinessNumber,
          passwordTwoDigits: data.passwordTwoDigits,
          customerKey: userId,
          customerEmail: userEmail,
          customerName: userName,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || '결제 처리 중 오류가 발생했습니다');
      }

      // Redirect to success page
      router.push('/payment/success');
    } catch (err) {
      console.error('결제 오류:', err);
      setError(err instanceof Error ? err.message : '결제 처리 중 오류가 발생했습니다');
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Card Number */}
      <div className="space-y-2">
        <Label htmlFor="cardNumber">카드 번호</Label>
        <Input
          id="cardNumber"
          type="text"
          placeholder="1234567812345678"
          maxLength={16}
          {...register('cardNumber')}
          className={errors.cardNumber ? 'border-destructive' : ''}
        />
        {errors.cardNumber && (
          <p className="text-sm text-destructive">{errors.cardNumber.message}</p>
        )}
      </div>

      {/* Expiry Date */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="expiryMonth">유효기간 (월)</Label>
          <Input
            id="expiryMonth"
            type="text"
            placeholder="MM"
            maxLength={2}
            {...register('expiryMonth')}
            className={errors.expiryMonth ? 'border-destructive' : ''}
          />
          {errors.expiryMonth && (
            <p className="text-sm text-destructive">{errors.expiryMonth.message}</p>
          )}
        </div>
        <div className="space-y-2">
          <Label htmlFor="expiryYear">유효기간 (년)</Label>
          <Input
            id="expiryYear"
            type="text"
            placeholder="YY"
            maxLength={2}
            {...register('expiryYear')}
            className={errors.expiryYear ? 'border-destructive' : ''}
          />
          {errors.expiryYear && (
            <p className="text-sm text-destructive">{errors.expiryYear.message}</p>
          )}
        </div>
      </div>

      {/* Birth Date or Business Number */}
      <div className="space-y-2">
        <Label htmlFor="birthOrBusinessNumber">생년월일 (YYMMDD)</Label>
        <Input
          id="birthOrBusinessNumber"
          type="text"
          placeholder="901231"
          maxLength={6}
          {...register('birthOrBusinessNumber')}
          className={errors.birthOrBusinessNumber ? 'border-destructive' : ''}
        />
        {errors.birthOrBusinessNumber && (
          <p className="text-sm text-destructive">{errors.birthOrBusinessNumber.message}</p>
        )}
        <p className="text-xs text-muted-foreground">
          개인카드: 생년월일 6자리 / 법인카드: 사업자등록번호 10자리
        </p>
      </div>

      {/* Password Two Digits */}
      <div className="space-y-2">
        <Label htmlFor="passwordTwoDigits">카드 비밀번호 앞 2자리</Label>
        <Input
          id="passwordTwoDigits"
          type="password"
          placeholder="••"
          maxLength={2}
          {...register('passwordTwoDigits')}
          className={errors.passwordTwoDigits ? 'border-destructive' : ''}
        />
        {errors.passwordTwoDigits && (
          <p className="text-sm text-destructive">{errors.passwordTwoDigits.message}</p>
        )}
      </div>

      {/* Error Message */}
      {error && (
        <div className="rounded-lg border border-destructive bg-destructive/10 p-4">
          <p className="text-sm text-destructive">{error}</p>
        </div>
      )}

      {/* Submit Button */}
      <Button
        type="submit"
        disabled={isSubmitting || !isValid}
        size="lg"
        className="w-full"
      >
        {isSubmitting ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            결제 진행 중...
          </>
        ) : (
          `월 ${SUBSCRIPTION.PRO_PRICE.toLocaleString()}원 결제하기`
        )}
      </Button>

      <p className="text-center text-xs text-muted-foreground">
        안전한 결제를 위해 카드 정보는 암호화되어 전송됩니다
      </p>
    </form>
  );
}
</file>

<file path="src/app/api/[[...hono]]/route.ts">
import { handle } from 'hono/vercel';
import { createHonoApp } from '@/backend/hono/app';

const app = createHonoApp();

export const GET = handle(app);
export const POST = handle(app);
export const PUT = handle(app);
export const PATCH = handle(app);
export const DELETE = handle(app);
export const OPTIONS = handle(app);

export const runtime = 'nodejs';
</file>

<file path="src/app/api/payments/card/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { createPureClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';
import { SUBSCRIPTION } from '@/constants/app';
import { nanoid } from 'nanoid';

export async function POST(request: NextRequest) {
  try {
    // Get user authentication
    const { userId } = await auth();

    if (!userId) {
      return NextResponse.json(
        { error: '로그인이 필요합니다' },
        { status: 401 }
      );
    }

    // Parse request body
    const body = await request.json();
    const {
      cardNumber,
      expiryMonth,
      expiryYear,
      birthOrBusinessNumber,
      passwordTwoDigits,
      customerKey,
      customerEmail,
      customerName,
    } = body;

    // Validate required fields
    if (!cardNumber || !expiryMonth || !expiryYear || !birthOrBusinessNumber || !passwordTwoDigits) {
      return NextResponse.json(
        { error: '모든 카드 정보를 입력해주세요' },
        { status: 400 }
      );
    }

    // Get Toss Payments secret key
    const secretKey = process.env.TOSS_PAYMENTS_SECRET_KEY;

    if (!secretKey) {
      console.error('TOSS_PAYMENTS_SECRET_KEY가 설정되지 않았습니다');
      return NextResponse.json(
        { error: '서버 설정 오류' },
        { status: 500 }
      );
    }

    // Get user from database
    const supabase = await createPureClient();
    const user = await getUserByClerkId(supabase, userId);

    if (!user) {
      return NextResponse.json(
        { error: '사용자를 찾을 수 없습니다' },
        { status: 404 }
      );
    }

    // 테스트 모드: 실제 API 호출 없이 결제 시뮬레이션
    console.log('테스트 결제 시작...');

    // 테스트용 데이터 생성
    const orderId = `TEST_ORDER_${Date.now()}_${nanoid(10)}`;
    const paymentKey = `TEST_PAYMENT_${nanoid(20)}`;
    const billingKey = `TEST_BILLING_${nanoid(20)}`;

    console.log('테스트 결제 성공:', { orderId, paymentKey, billingKey });

    // Step 3: Save payment record
    const { error: paymentError } = await supabase.from('payments').insert({
      user_id: user.id,
      order_id: orderId,
      payment_key: paymentKey,
      amount: SUBSCRIPTION.PRO_PRICE,
      status: 'done',
    });

    if (paymentError) {
      console.error('결제 내역 저장 실패:', paymentError);
    }

    // Step 4: Update user subscription
    const subscriptionEndsAt = new Date();
    subscriptionEndsAt.setDate(subscriptionEndsAt.getDate() + SUBSCRIPTION.PRO_DURATION_DAYS);

    const { error: userUpdateError } = await supabase
      .from('users')
      .update({
        subscription_tier: 'pro',
        subscription_ends_at: subscriptionEndsAt.toISOString(),
        analyses_remaining: SUBSCRIPTION.PRO_ANALYSES_COUNT,
        cancelled_at: null,
      })
      .eq('id', user.id);

    if (userUpdateError) {
      console.error('구독 정보 업데이트 실패:', userUpdateError);
      return NextResponse.json(
        { error: '구독 정보 업데이트에 실패했습니다' },
        { status: 500 }
      );
    }

    // Step 5: Save billing key for recurring payments
    await supabase.from('billing_keys').upsert({
      user_id: user.id,
      billing_key: billingKey,
    });

    console.log('결제 프로세스 완료');

    return NextResponse.json({
      success: true,
      orderId,
      paymentKey,
    });
  } catch (error) {
    console.error('결제 처리 중 오류:', error);
    return NextResponse.json(
      { error: '결제 처리 중 오류가 발생했습니다' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/subscription/cancel/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { createPureClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';

export async function POST(request: NextRequest) {
  try {
    // Get user authentication
    const { userId } = await auth();

    if (!userId) {
      return NextResponse.json(
        { error: '로그인이 필요합니다' },
        { status: 401 }
      );
    }

    // Get user from database
    const supabase = await createPureClient();
    const user = await getUserByClerkId(supabase, userId);

    if (!user) {
      return NextResponse.json(
        { error: '사용자를 찾을 수 없습니다' },
        { status: 404 }
      );
    }

    // Check if user has active Pro subscription
    if (user.subscription_tier !== 'pro') {
      return NextResponse.json(
        { error: 'Pro 구독이 없습니다' },
        { status: 400 }
      );
    }

    // Check if already cancelled
    if (user.cancelled_at) {
      return NextResponse.json(
        { error: '이미 취소된 구독입니다' },
        { status: 400 }
      );
    }

    // Mark subscription as cancelled
    const { error: updateError } = await supabase
      .from('users')
      .update({
        cancelled_at: new Date().toISOString(),
      })
      .eq('id', user.id);

    if (updateError) {
      console.error('구독 취소 실패:', updateError);
      return NextResponse.json(
        { error: '구독 취소에 실패했습니다' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: '구독이 취소되었습니다',
    });
  } catch (error) {
    console.error('구독 취소 중 오류:', error);
    return NextResponse.json(
      { error: '구독 취소 중 오류가 발생했습니다' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/example/page.tsx">
'use client';

import { ExampleStatus } from '@/features/example/components/example-status';

export default function ExamplePage() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-950 via-slate-900 to-slate-950 px-6 py-16 text-slate-100">
      <ExampleStatus />
    </div>
  );
}
</file>

<file path="src/app/payment/success/page.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle2 } from 'lucide-react';
import Link from 'next/link';
import { SUBSCRIPTION } from '@/constants/app';

export default function PaymentSuccessPage() {
  return (
    <div className="container mx-auto max-w-2xl px-4 py-16">
      <Card>
        <CardHeader className="text-center">
          <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-green-100">
            <CheckCircle2 className="h-10 w-10 text-green-600" />
          </div>
          <CardTitle className="text-2xl">결제가 완료되었습니다!</CardTitle>
          <CardDescription>
            Pro 구독이 성공적으로 활성화되었습니다
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="rounded-lg bg-muted p-4">
            <h3 className="mb-3 font-semibold">구독 정보</h3>
            <ul className="space-y-2 text-sm">
              <li className="flex justify-between">
                <span className="text-muted-foreground">요금제</span>
                <span className="font-medium">Pro</span>
              </li>
              <li className="flex justify-between">
                <span className="text-muted-foreground">월 결제 금액</span>
                <span className="font-medium">{SUBSCRIPTION.PRO_PRICE.toLocaleString()}원</span>
              </li>
              <li className="flex justify-between">
                <span className="text-muted-foreground">월 분석 횟수</span>
                <span className="font-medium">{SUBSCRIPTION.PRO_ANALYSES_COUNT}회</span>
              </li>
              <li className="flex justify-between">
                <span className="text-muted-foreground">사용 모델</span>
                <span className="font-medium">Gemini 2.5 Pro</span>
              </li>
            </ul>
          </div>

          <div className="rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-900 dark:bg-blue-950">
            <p className="text-sm text-blue-900 dark:text-blue-100">
              💡 구독은 매달 자동으로 갱신됩니다. 언제든지 구독 관리 페이지에서 취소하실 수 있습니다.
            </p>
          </div>
        </CardContent>
        <CardFooter className="flex gap-3">
          <Button asChild className="flex-1">
            <Link href="/analysis/new">새 분석 시작하기</Link>
          </Button>
          <Button asChild variant="outline" className="flex-1">
            <Link href="/dashboard">대시보드로 이동</Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="src/app/sign-in/[[...sign-in]]/page.tsx">
import { SignIn } from '@clerk/nextjs';

export default function SignInPage() {
  return (
    <div className="flex min-h-screen items-center justify-center px-4">
      <SignIn
        appearance={{
          elements: {
            rootBox: 'mx-auto',
            card: 'shadow-xl',
          },
        }}
        afterSignInUrl="/dashboard"
        signUpUrl="/sign-up"
      />
    </div>
  );
}
</file>

<file path="src/app/sign-up/[[...sign-up]]/page.tsx">
import { SignUp } from '@clerk/nextjs';

export default function SignUpPage() {
  return (
    <div className="flex min-h-screen items-center justify-center px-4">
      <SignUp
        appearance={{
          elements: {
            rootBox: 'mx-auto',
            card: 'shadow-xl',
          },
        }}
        afterSignUpUrl="/dashboard"
        signInUrl="/sign-in"
      />
    </div>
  );
}
</file>

<file path="src/app/test-user-id/page.tsx">
import { auth } from '@clerk/nextjs/server';

export default async function TestUserIdPage() {
  const { userId } = await auth();

  return (
    <div className="container mx-auto px-4 py-20">
      <h1 className="text-2xl font-bold mb-4">현재 로그인한 Clerk User ID</h1>
      <div className="bg-muted p-4 rounded-lg">
        <p className="font-mono text-sm break-all">{userId || '로그인되지 않음'}</p>
      </div>
      <p className="mt-4 text-sm text-muted-foreground">
        이 ID를 복사해서 Supabase users 테이블에 수동으로 추가하세요.
      </p>
    </div>
  );
}
</file>

<file path="src/app/providers.tsx">
// In Next.js, this file would be called: app/providers.tsx
"use client";

// Since QueryClientProvider relies on useContext under the hood, we have to put 'use client' on top
import {
  isServer,
  QueryClient,
  QueryClientProvider,
} from "@tanstack/react-query";
import { ThemeProvider } from "next-themes";

function makeQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        // With SSR, we usually want to set some default staleTime
        // above 0 to avoid refetching immediately on the client
        staleTime: 60 * 1000,
      },
    },
  });
}

let browserQueryClient: QueryClient | undefined = undefined;

function getQueryClient() {
  if (isServer) {
    // Server: always make a new query client
    return makeQueryClient();
  } else {
    // Browser: make a new query client if we don't already have one
    // This is very important, so we don't re-make a new client if React
    // suspends during the initial render. This may not be needed if we
    // have a suspense boundary BELOW the creation of the query client
    if (!browserQueryClient) browserQueryClient = makeQueryClient();
    return browserQueryClient;
  }
}

export default function Providers({ children }: { children: React.ReactNode }) {
  // NOTE: Avoid useState when initializing the query client if you don't
  //       have a suspense boundary between this and the code that may
  //       suspend because React will throw away the client on the initial
  //       render if it suspends and there is no boundary
  const queryClient = getQueryClient();

  return (
    <ThemeProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      forcedTheme="light"
      disableTransitionOnChange
    >
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </ThemeProvider>
  );
}
</file>

<file path="src/backend/config/index.ts">
import { z } from 'zod';
import type { AppConfig } from '@/backend/hono/context';

const envSchema = z.object({
  SUPABASE_URL: z.string().url(),
  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1),
});

let cachedConfig: AppConfig | null = null;

export const getAppConfig = (): AppConfig => {
  if (cachedConfig) {
    return cachedConfig;
  }

  const parsed = envSchema.safeParse({
    SUPABASE_URL: process.env.SUPABASE_URL,
    SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,
  });

  if (!parsed.success) {
    const messages = parsed.error.issues
      .map((issue) => `${issue.path.join('.') || 'config'}: ${issue.message}`)
      .join('; ');
    throw new Error(`Invalid backend configuration: ${messages}`);
  }

  cachedConfig = {
    supabase: {
      url: parsed.data.SUPABASE_URL,
      serviceRoleKey: parsed.data.SUPABASE_SERVICE_ROLE_KEY,
    },
  } satisfies AppConfig;

  return cachedConfig;
};
</file>

<file path="src/backend/hono/app.ts">
import { Hono } from "hono";
import { errorBoundary } from "@/backend/middleware/error";
import { withAppContext } from "@/backend/middleware/context";
import { withSupabase } from "@/backend/middleware/supabase";
import { registerExampleRoutes } from "@/features/example/backend/route";
import type { AppEnv } from "@/backend/hono/context";

let singletonApp: Hono<AppEnv> | null = null;

export const createHonoApp = () => {
  if (singletonApp && process.env.NODE_ENV === "production") {
    return singletonApp;
  }

  const app = new Hono<AppEnv>();

  app.use("*", errorBoundary());
  app.use("*", withAppContext());
  app.use("*", withSupabase());

  registerExampleRoutes(app);

  app.notFound((c) => {
    return c.json(
      {
        error: {
          code: "NOT_FOUND",
          message: `Route not found: ${c.req.method} ${c.req.path}`,
        },
      },
      404
    );
  });

  if (process.env.NODE_ENV === "production") {
    singletonApp = app;
  }

  return app;
};
</file>

<file path="src/backend/hono/context.ts">
import type { Context } from 'hono';
import type { SupabaseClient } from '@supabase/supabase-js';

export type AppLogger = Pick<Console, 'info' | 'error' | 'warn' | 'debug'>;

export type AppConfig = {
  supabase: {
    url: string;
    serviceRoleKey: string;
  };
};

export type AppVariables = {
  supabase: SupabaseClient;
  logger: AppLogger;
  config: AppConfig;
};

export type AppEnv = {
  Variables: AppVariables;
};

export type AppContext = Context<AppEnv>;

export const contextKeys = {
  supabase: 'supabase',
  logger: 'logger',
  config: 'config',
} as const satisfies Record<keyof AppVariables, keyof AppVariables>;

export const getSupabase = (c: AppContext) =>
  c.get(contextKeys.supabase) as SupabaseClient;

export const getLogger = (c: AppContext) =>
  c.get(contextKeys.logger) as AppLogger;

export const getConfig = (c: AppContext) =>
  c.get(contextKeys.config) as AppConfig;
</file>

<file path="src/backend/http/response.ts">
import type { ContentfulStatusCode } from 'hono/utils/http-status';
import type { AppContext } from '@/backend/hono/context';

export type SuccessResult<TData> = {
  ok: true;
  status: ContentfulStatusCode;
  data: TData;
};

export type ErrorResult<TCode extends string, TDetails = unknown> = {
  ok: false;
  status: ContentfulStatusCode;
  error: {
    code: TCode;
    message: string;
    details?: TDetails;
  };
};

export type HandlerResult<TData, TCode extends string, TDetails = unknown> =
  | SuccessResult<TData>
  | ErrorResult<TCode, TDetails>;

export const success = <TData>(
  data: TData,
  status: ContentfulStatusCode = 200,
): SuccessResult<TData> => ({
  ok: true,
  status,
  data,
});

export const failure = <TCode extends string, TDetails = unknown>(
  status: ContentfulStatusCode,
  code: TCode,
  message: string,
  details?: TDetails,
): ErrorResult<TCode, TDetails> => ({
  ok: false,
  status,
  error: {
    code,
    message,
    ...(details === undefined ? {} : { details }),
  },
});

export const respond = <TData, TCode extends string, TDetails = unknown>(
  c: AppContext,
  result: HandlerResult<TData, TCode, TDetails>,
) => {
  if (result.ok) {
    return c.json(result.data, result.status);
  }

  const errorResult = result as ErrorResult<TCode, TDetails>;

  return c.json(
    {
      error: errorResult.error,
    },
    errorResult.status,
  );
};
</file>

<file path="src/backend/middleware/context.ts">
import { createMiddleware } from 'hono/factory';
import { getAppConfig } from '@/backend/config';
import {
  contextKeys,
  type AppEnv,
  type AppLogger,
} from '@/backend/hono/context';

const logger: AppLogger = {
  info: (...args) => console.info(...args),
  error: (...args) => console.error(...args),
  warn: (...args) => console.warn(...args),
  debug: (...args) => console.debug(...args),
};

export const withAppContext = () => {
  const config = getAppConfig();

  return createMiddleware<AppEnv>(async (c, next) => {
    c.set(contextKeys.logger, logger);
    c.set(contextKeys.config, config);

    await next();
  });
};
</file>

<file path="src/backend/middleware/error.ts">
import { createMiddleware } from 'hono/factory';
import { match, P } from 'ts-pattern';
import {
  contextKeys,
  type AppEnv,
  type AppLogger,
} from '@/backend/hono/context';

export const errorBoundary = () =>
  createMiddleware<AppEnv>(async (c, next) => {
    try {
      await next();
    } catch (error) {
      const logger = c.get(contextKeys.logger) as AppLogger | undefined;
      const message = match(error)
        .with(P.instanceOf(Error), (err) => err.message)
        .otherwise(() => 'Unexpected error');

      logger?.error?.(error);

      return c.json(
        {
          error: {
            code: 'INTERNAL_SERVER_ERROR',
            message,
          },
        },
        500,
      );
    }
  });
</file>

<file path="src/backend/middleware/supabase.ts">
import { createMiddleware } from 'hono/factory';
import {
  contextKeys,
  type AppEnv,
} from '@/backend/hono/context';
import { createServiceClient } from '@/backend/supabase/client';

export const withSupabase = () =>
  createMiddleware<AppEnv>(async (c, next) => {
    const config = c.get(
      contextKeys.config,
    ) as AppEnv['Variables']['config'] | undefined;

    if (!config) {
      throw new Error('Application configuration is not available.');
    }

    const client = createServiceClient(config.supabase);

    c.set(contextKeys.supabase, client);

    await next();
  });
</file>

<file path="src/backend/supabase/client.ts">
import { createClient } from '@supabase/supabase-js';
import type { SupabaseClient } from '@supabase/supabase-js';

export type ServiceClientConfig = {
  url: string;
  serviceRoleKey: string;
};

export const createServiceClient = ({
  url,
  serviceRoleKey,
}: ServiceClientConfig): SupabaseClient =>
  createClient(url, serviceRoleKey, {
    auth: {
      persistSession: false,
    },
  });
</file>

<file path="src/components/common/ErrorMessage.tsx">
import { AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';

interface ErrorMessageProps {
  title?: string;
  message: string;
  onRetry?: () => void;
}

export function ErrorMessage({
  title = '오류가 발생했습니다',
  message,
  onRetry,
}: ErrorMessageProps) {
  return (
    <Card className="border-destructive">
      <CardHeader>
        <div className="flex items-center gap-2">
          <AlertCircle className="h-5 w-5 text-destructive" />
          <CardTitle className="text-destructive">{title}</CardTitle>
        </div>
        <CardDescription>{message}</CardDescription>
      </CardHeader>
      {onRetry && (
        <CardFooter>
          <Button onClick={onRetry} variant="outline">
            다시 시도
          </Button>
        </CardFooter>
      )}
    </Card>
  );
}
</file>

<file path="src/components/common/Loading.tsx">
import { Loader2 } from 'lucide-react';

interface LoadingProps {
  message?: string;
  fullScreen?: boolean;
}

export function Loading({ message = '로딩 중...', fullScreen = false }: LoadingProps) {
  if (fullScreen) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="flex flex-col items-center gap-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="text-sm text-muted-foreground">{message}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center p-8">
      <div className="flex flex-col items-center gap-4">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-sm text-muted-foreground">{message}</p>
      </div>
    </div>
  );
}
</file>

<file path="src/components/layout/Footer.tsx">
import Link from 'next/link';

export function Footer() {
  return (
    <footer className="mt-auto border-t bg-background">
      <div className="container px-4 py-8">
        <div className="grid gap-8 md:grid-cols-3">
          {/* About */}
          <div>
            <h3 className="mb-3 font-semibold">사주 분석 서비스</h3>
            <p className="text-sm text-muted-foreground">
              Google Gemini AI 기반의 전문적인 사주 분석 서비스
            </p>
          </div>

          {/* Links */}
          <div>
            <h3 className="mb-3 font-semibold">서비스</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link href="/dashboard" className="text-muted-foreground hover:text-foreground">
                  대시보드
                </Link>
              </li>
              <li>
                <Link href="/analysis/new" className="text-muted-foreground hover:text-foreground">
                  새 분석하기
                </Link>
              </li>
              <li>
                <Link href="/subscription" className="text-muted-foreground hover:text-foreground">
                  구독 관리
                </Link>
              </li>
            </ul>
          </div>

          {/* Support */}
          <div>
            <h3 className="mb-3 font-semibold">지원</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link href="/account" className="text-muted-foreground hover:text-foreground">
                  계정 관리
                </Link>
              </li>
              <li>
                <span className="text-muted-foreground">고객센터 (준비 중)</span>
              </li>
            </ul>
          </div>
        </div>

        <div className="mt-8 border-t pt-6 text-center text-sm text-muted-foreground">
          <p>&copy; 2025 사주 분석 서비스. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/subscription/SubscriptionCard.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import type { User } from '@/types/user';
import { calculateSubscriptionStatus } from '@/utils/subscription';
import { formatDate } from '@/utils/date';
import Link from 'next/link';

interface SubscriptionCardProps {
  user: User;
}

export function SubscriptionCard({ user }: SubscriptionCardProps) {
  const status = calculateSubscriptionStatus(user);

  const getStatusDisplay = () => {
    switch (status.type) {
      case 'free':
        return {
          tier: 'Free',
          badge: 'default' as const,
          description: '무료 요금제',
          details: `남은 분석: ${user.analyses_remaining}/3회`,
          cta: 'Pro 요금제로 업그레이드',
          ctaLink: '/subscription/upgrade',
        };
      case 'pro_active':
        return {
          tier: 'Pro',
          badge: 'default' as const,
          description: 'Pro 요금제 (활성)',
          details: `남은 분석: ${status.remaining}/10회 | 만료일: ${formatDate(status.endsAt.toISOString())}`,
          cta: '구독 관리',
          ctaLink: '/subscription',
        };
      case 'pro_cancelled':
        return {
          tier: 'Pro',
          badge: 'secondary' as const,
          description: 'Pro 요금제 (취소 예정)',
          details: `종료일: ${formatDate(status.endsAt.toISOString())} | 남은 분석: ${status.remaining}/10회`,
          cta: '구독 재개',
          ctaLink: '/subscription',
        };
      case 'pro_expired':
        return {
          tier: 'Free',
          badge: 'destructive' as const,
          description: 'Pro 구독 만료',
          details: '무료 요금제로 전환되었습니다',
          cta: 'Pro 요금제 재구독',
          ctaLink: '/subscription/upgrade',
        };
    }
  };

  const display = getStatusDisplay();

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>구독 정보</CardTitle>
          <Badge variant={display.badge}>{display.tier}</Badge>
        </div>
        <CardDescription>{display.description}</CardDescription>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground">{display.details}</p>
      </CardContent>
      <CardFooter>
        <Button asChild className="w-full">
          <Link href={display.ctaLink}>{display.cta}</Link>
        </Button>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-xs",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/checkbox.tsx">
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="src/components/ui/file-upload.tsx">
"use client";

import { cn } from "@/lib/utils";
import { ChangeEvent, useRef } from "react";

interface FileUploadProps extends React.HTMLAttributes<HTMLDivElement> {
  onFileChange: (file: File) => void;
  accept?: string;
}

export function FileUpload({
  className,
  onFileChange,
  accept = "image/*",
  children,
  ...props
}: FileUploadProps) {
  const inputRef = useRef<HTMLInputElement>(null);

  const handleClick = () => {
    inputRef.current?.click();
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      onFileChange(file);
    }
  };

  return (
    <div
      onClick={handleClick}
      className={cn(
        "cursor-pointer rounded-md border-2 border-dashed border-gray-300 p-4 hover:border-gray-400",
        className
      )}
      {...props}
    >
      <input
        type="file"
        ref={inputRef}
        onChange={handleChange}
        accept={accept}
        className="hidden"
      />
      {children}
    </div>
  );
}
</file>

<file path="src/components/ui/form.tsx">
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-sm text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-sm font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };
</file>

<file path="src/components/ui/label.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="src/components/ui/select.tsx">
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/lib/utils';

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-(--radix-select-trigger-height) w-full min-w-(--radix-select-trigger-width)',
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-px w-full" : "h-full w-px",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = 'SheetHeader';

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = 'SheetFooter';

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<'textarea'>
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="src/components/ui/toast.tsx">
'use client';

import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-100 flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-(--radix-toast-swipe-end-x) data-[swipe=move]:translate-x-(--radix-toast-swipe-move-x) data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 hover:group-[.destructive]:border-destructive/30 hover:group-[.destructive]:bg-destructive hover:group-[.destructive]:text-destructive-foreground focus:group-[.destructive]:ring-destructive',
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-hidden focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 hover:group-[.destructive]:text-red-50 focus:group-[.destructive]:ring-red-400 focus:group-[.destructive]:ring-offset-red-600',
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="src/components/ui/toaster.tsx">
'use client';

import { useToast } from '@/hooks/use-toast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="src/constants/auth.ts">
import { match } from "ts-pattern";

const PUBLIC_PATHS = ["/", "/login", "/signup"] as const;
const PUBLIC_PREFIXES = ["/_next", "/api", "/favicon", "/static", "/docs", "/images"] as const;

export const LOGIN_PATH = "/login";
export const SIGNUP_PATH = "/signup";
export const AUTH_ENTRY_PATHS = [LOGIN_PATH, SIGNUP_PATH] as const;
export const isAuthEntryPath = (
  pathname: string
): pathname is (typeof AUTH_ENTRY_PATHS)[number] =>
  AUTH_ENTRY_PATHS.includes(pathname as (typeof AUTH_ENTRY_PATHS)[number]);

export const isAuthPublicPath = (pathname: string) => {
  const normalized = pathname.toLowerCase();

  return match(normalized)
    .when(
      (path) => PUBLIC_PATHS.some((publicPath) => publicPath === path),
      () => true
    )
    .when(
      (path) => PUBLIC_PREFIXES.some((prefix) => path.startsWith(prefix)),
      () => true
    )
    .otherwise(() => false);
};

export const shouldProtectPath = (pathname: string) => !isAuthPublicPath(pathname);
</file>

<file path="src/features/auth/context/current-user-context.tsx">
"use client";

import {
  createContext,
  useCallback,
  useContext,
  useMemo,
  useState,
  type ReactNode,
} from "react";
import { useQueryClient } from "@tanstack/react-query";
import { match, P } from "ts-pattern";
import { getSupabaseBrowserClient } from "@/lib/supabase/browser-client";
import type {
  CurrentUserContextValue,
  CurrentUserSnapshot,
} from "../types";

const CurrentUserContext = createContext<CurrentUserContextValue | null>(null);

type CurrentUserProviderProps = {
  children: ReactNode;
  initialState: CurrentUserSnapshot;
};

export const CurrentUserProvider = ({
  children,
  initialState,
}: CurrentUserProviderProps) => {
  const queryClient = useQueryClient();
  const [snapshot, setSnapshot] = useState<CurrentUserSnapshot>(initialState);

  const refresh = useCallback(async () => {
    setSnapshot((prev) => ({ status: "loading", user: prev.user }));
    const supabase = getSupabaseBrowserClient();

    try {
      const result = await supabase.auth.getUser();

      const nextSnapshot = match(result)
        .with({ data: { user: P.nonNullable } }, ({ data }) => ({
          status: "authenticated" as const,
          user: {
            id: data.user.id,
            email: data.user.email,
            appMetadata: data.user.app_metadata ?? {},
            userMetadata: data.user.user_metadata ?? {},
          },
        }))
        .otherwise(() => ({ status: "unauthenticated" as const, user: null }));

      setSnapshot(nextSnapshot);
      queryClient.setQueryData(["currentUser"], nextSnapshot);
    } catch (error) {
      const fallbackSnapshot: CurrentUserSnapshot = {
        status: "unauthenticated",
        user: null,
      };
      setSnapshot(fallbackSnapshot);
      queryClient.setQueryData(["currentUser"], fallbackSnapshot);
    }
  }, [queryClient]);

  const value = useMemo<CurrentUserContextValue>(() => {
    return {
      ...snapshot,
      refresh,
      isAuthenticated: snapshot.status === "authenticated",
      isLoading: snapshot.status === "loading",
    };
  }, [refresh, snapshot]);

  return (
    <CurrentUserContext.Provider value={value}>
      {children}
    </CurrentUserContext.Provider>
  );
};

export const useCurrentUserContext = () => {
  const value = useContext(CurrentUserContext);

  if (!value) {
    throw new Error("CurrentUserProvider가 트리 상단에 필요합니다.");
  }

  return value;
};
</file>

<file path="src/features/auth/hooks/useCurrentUser.ts">
"use client";

import { useMemo } from "react";
import { useCurrentUserContext } from "../context/current-user-context";

export const useCurrentUser = () => {
  const context = useCurrentUserContext();

  return useMemo(
    () => ({
      user: context.user,
      status: context.status,
      isAuthenticated: context.isAuthenticated,
      isLoading: context.isLoading,
      refresh: context.refresh,
    }),
    [context]
  );
};
</file>

<file path="src/features/auth/server/load-current-user.ts">
import "server-only";

import type { User } from "@supabase/supabase-js";
import { createSupabaseServerClient } from "@/lib/supabase/server-client";
import type { CurrentUserSnapshot } from "../types";

const mapUser = (user: User) => ({
  id: user.id,
  email: user.email,
  appMetadata: user.app_metadata ?? {},
  userMetadata: user.user_metadata ?? {},
});

export const loadCurrentUser = async (): Promise<CurrentUserSnapshot> => {
  const supabase = await createSupabaseServerClient();
  const result = await supabase.auth.getUser();
  const user = result.data.user;

  if (user) {
    return {
      status: "authenticated",
      user: mapUser(user),
    };
  }

  return { status: "unauthenticated", user: null };
};
</file>

<file path="src/features/auth/types.ts">
export type CurrentUser = {
  id: string;
  email: string | null;
  appMetadata: Record<string, unknown>;
  userMetadata: Record<string, unknown>;
};

export type CurrentUserSnapshot =
  | { status: "authenticated"; user: CurrentUser }
  | { status: "unauthenticated"; user: null }
  | { status: "loading"; user: CurrentUser | null };

export type CurrentUserContextValue = CurrentUserSnapshot & {
  refresh: () => Promise<void>;
  isAuthenticated: boolean;
  isLoading: boolean;
};
</file>

<file path="src/features/example/backend/error.ts">
export const exampleErrorCodes = {
  notFound: 'EXAMPLE_NOT_FOUND',
  fetchError: 'EXAMPLE_FETCH_ERROR',
  validationError: 'EXAMPLE_VALIDATION_ERROR',
} as const;

type ExampleErrorValue = (typeof exampleErrorCodes)[keyof typeof exampleErrorCodes];

export type ExampleServiceError = ExampleErrorValue;
</file>

<file path="src/features/example/backend/route.ts">
import type { Hono } from 'hono';
import {
  failure,
  respond,
  type ErrorResult,
} from '@/backend/http/response';
import {
  getLogger,
  getSupabase,
  type AppEnv,
} from '@/backend/hono/context';
import { ExampleParamsSchema } from '@/features/example/backend/schema';
import { getExampleById } from './service';
import {
  exampleErrorCodes,
  type ExampleServiceError,
} from './error';

export const registerExampleRoutes = (app: Hono<AppEnv>) => {
  app.get('/example/:id', async (c) => {
    const parsedParams = ExampleParamsSchema.safeParse({ id: c.req.param('id') });

    if (!parsedParams.success) {
      return respond(
        c,
        failure(
          400,
          'INVALID_EXAMPLE_PARAMS',
          'The provided example id is invalid.',
          parsedParams.error.format(),
        ),
      );
    }

    const supabase = getSupabase(c);
    const logger = getLogger(c);

    const result = await getExampleById(supabase, parsedParams.data.id);

    if (!result.ok) {
      const errorResult = result as ErrorResult<ExampleServiceError, unknown>;

      if (errorResult.error.code === exampleErrorCodes.fetchError) {
        logger.error('Failed to fetch example', errorResult.error.message);
      }

      return respond(c, result);
    }

    return respond(c, result);
  });
};
</file>

<file path="src/features/example/backend/schema.ts">
import { z } from 'zod';

export const ExampleParamsSchema = z.object({
  id: z.string().uuid({ message: 'Example id must be a valid UUID.' }),
});

export const ExampleResponseSchema = z.object({
  id: z.string().uuid(),
  fullName: z.string(),
  avatarUrl: z.string().url(),
  bio: z.string().nullable(),
  updatedAt: z.string(),
});

export type ExampleResponse = z.infer<typeof ExampleResponseSchema>;

export const ExampleTableRowSchema = z.object({
  id: z.string().uuid(),
  full_name: z.string().nullable(),
  avatar_url: z.string().nullable(),
  bio: z.string().nullable(),
  updated_at: z.string(),
});

export type ExampleRow = z.infer<typeof ExampleTableRowSchema>;
</file>

<file path="src/features/example/backend/service.ts">
import type { SupabaseClient } from '@supabase/supabase-js';
import {
  failure,
  success,
  type HandlerResult,
} from '@/backend/http/response';
import {
  ExampleResponseSchema,
  ExampleTableRowSchema,
  type ExampleResponse,
  type ExampleRow,
} from '@/features/example/backend/schema';
import {
  exampleErrorCodes,
  type ExampleServiceError,
} from '@/features/example/backend/error';

const EXAMPLE_TABLE = 'example';

const fallbackAvatar = (id: string) =>
  `https://picsum.photos/seed/${encodeURIComponent(id)}/200/200`;

export const getExampleById = async (
  client: SupabaseClient,
  id: string,
): Promise<HandlerResult<ExampleResponse, ExampleServiceError, unknown>> => {
  const { data, error } = await client
    .from(EXAMPLE_TABLE)
    .select('id, full_name, avatar_url, bio, updated_at')
    .eq('id', id)
    .maybeSingle<ExampleRow>();

  if (error) {
    return failure(500, exampleErrorCodes.fetchError, error.message);
  }

  if (!data) {
    return failure(404, exampleErrorCodes.notFound, 'Example not found');
  }

  const rowParse = ExampleTableRowSchema.safeParse(data);

  if (!rowParse.success) {
    return failure(
      500,
      exampleErrorCodes.validationError,
      'Example row failed validation.',
      rowParse.error.format(),
    );
  }

  const mapped = {
    id: rowParse.data.id,
    fullName: rowParse.data.full_name ?? 'Anonymous User',
    avatarUrl:
      rowParse.data.avatar_url ?? fallbackAvatar(rowParse.data.id),
    bio: rowParse.data.bio,
    updatedAt: rowParse.data.updated_at,
  } satisfies ExampleResponse;

  const parsed = ExampleResponseSchema.safeParse(mapped);

  if (!parsed.success) {
    return failure(
      500,
      exampleErrorCodes.validationError,
      'Example payload failed validation.',
      parsed.error.format(),
    );
  }

  return success(parsed.data);
};
</file>

<file path="src/features/example/components/example-status.tsx">
'use client';

import { useState } from 'react';
import type { FormEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useExampleQuery } from '@/features/example/hooks/useExampleQuery';

const statusBadge = (
  label: string,
  tone: 'success' | 'error' | 'idle',
) => {
  const toneStyles: Record<typeof tone, string> = {
    success: 'bg-emerald-500/10 text-emerald-300 border-emerald-400/40',
    error: 'bg-rose-500/10 text-rose-300 border-rose-400/40',
    idle: 'bg-slate-500/10 text-slate-200 border-slate-400/30',
  };

  return (
    <span
      className={`inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-medium ${toneStyles[tone]}`}
    >
      {label}
    </span>
  );
};

export const ExampleStatus = () => {
  const [inputValue, setInputValue] = useState('');
  const [exampleId, setExampleId] = useState('');
  const query = useExampleQuery(exampleId);

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const trimmed = inputValue.trim();

    if (!trimmed) {
      setExampleId('');
      return;
    }

    if (trimmed === exampleId) {
      void query.refetch();
      return;
    }

    setExampleId(trimmed);
  };

  return (
    <section className="mx-auto flex w-full max-w-3xl flex-col gap-6">
      <header className="space-y-2 text-slate-100">
        <h1 className="text-3xl font-semibold tracking-tight">Backend Health Check</h1>
        <p className="text-sm text-slate-300">
          예시 API(`/api/example/:id`)가 정상 동작하는지 확인합니다. Supabase 예시
          레코드의 UUID를 입력하면 React Query를 통해 백엔드 응답을 확인할 수
          있습니다.
        </p>
      </header>

      <form
        onSubmit={handleSubmit}
        className="flex flex-col gap-3 rounded-xl border border-slate-800 bg-slate-950/60 p-4 md:flex-row md:items-center"
      >
        <div className="flex-1 space-y-1">
          <label className="text-xs uppercase tracking-wide text-slate-400">
            Example UUID
          </label>
          <Input
            value={inputValue}
            onChange={(event) => setInputValue(event.target.value)}
            placeholder="00000000-0000-0000-0000-000000000000"
            className="bg-slate-900/70 text-slate-100 placeholder:text-slate-600"
          />
        </div>
        <Button
          type="submit"
          variant="secondary"
          className="mt-2 h-12 rounded-lg border border-slate-600 bg-slate-800 text-slate-100 hover:bg-slate-700 md:mt-6"
        >
          조회하기
        </Button>
      </form>

      <article className="space-y-3 rounded-xl border border-slate-800 bg-slate-950/60 p-6 text-slate-100">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold">현재 상태</h2>
          {exampleId
            ? query.status === 'pending'
              ? statusBadge('Fetching', 'idle')
              : query.status === 'error'
                ? statusBadge('Error', 'error')
                : statusBadge('Success', 'success')
            : statusBadge('Idle', 'idle')}
        </div>

        {!exampleId && (
          <p className="text-sm text-slate-300">
            UUID를 입력하고 조회하기 버튼을 누르면 결과가 이곳에 표시됩니다.
          </p>
        )}

        {exampleId && query.status === 'pending' && (
          <p className="text-sm text-slate-300">Supabase에서 데이터를 가져오는 중...</p>
        )}

        {query.status === 'error' && (
          <div className="space-y-2 rounded-lg border border-rose-400/30 bg-rose-500/5 p-4">
            <p className="text-sm font-medium text-rose-300">요청 실패</p>
            <p className="text-xs text-rose-200/80">
              {query.error instanceof Error
                ? query.error.message
                : '알 수 없는 에러가 발생했습니다.'}
            </p>
          </div>
        )}

        {query.data && (
          <div className="space-y-3 rounded-lg border border-emerald-400/30 bg-emerald-500/5 p-4 text-sm text-emerald-100">
            <div>
              <p className="text-xs uppercase tracking-wide text-emerald-300">ID</p>
              <p className="font-mono text-xs md:text-sm">{query.data.id}</p>
            </div>
            <div>
              <p className="text-xs uppercase tracking-wide text-emerald-300">
                이름
              </p>
              <p>{query.data.fullName}</p>
            </div>
            <div>
              <p className="text-xs uppercase tracking-wide text-emerald-300">
                소개
              </p>
              <p>{query.data.bio ?? '—'}</p>
            </div>
            <div>
              <p className="text-xs uppercase tracking-wide text-emerald-300">
                아바타
              </p>
              <a
                href={query.data.avatarUrl}
                target="_blank"
                rel="noreferrer"
                className="underline"
              >
                {query.data.avatarUrl}
              </a>
            </div>
            <div>
              <p className="text-xs uppercase tracking-wide text-emerald-300">
                업데이트 시각
              </p>
              <p>{query.data.updatedAt}</p>
            </div>
          </div>
        )}
      </article>
    </section>
  );
};
</file>

<file path="src/features/example/hooks/useExampleQuery.ts">
'use client';

import { useQuery } from '@tanstack/react-query';
import { apiClient, extractApiErrorMessage } from '@/lib/remote/api-client';
import { ExampleResponseSchema } from '@/features/example/lib/dto';

const fetchExample = async (id: string) => {
  try {
    const { data } = await apiClient.get(`/api/example/${id}`);
    return ExampleResponseSchema.parse(data);
  } catch (error) {
    const message = extractApiErrorMessage(error, 'Failed to fetch example.');
    throw new Error(message);
  }
};

export const useExampleQuery = (id: string) =>
  useQuery({
    queryKey: ['example', id],
    queryFn: () => fetchExample(id),
    enabled: Boolean(id),
    staleTime: 60 * 1000,
  });
</file>

<file path="src/features/example/lib/dto.ts">
export {
  ExampleParamsSchema,
  ExampleResponseSchema,
  type ExampleResponse,
} from '@/features/example/backend/schema';
</file>

<file path="src/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/clerk/config.ts">
import { env, serverEnv } from '@/constants/env';

// Public routes that don't require authentication
export const CLERK_PUBLIC_ROUTES = ['/'];

// Auth routes (sign-in, sign-up)
export const CLERK_AUTH_ROUTES = ['/sign-in', '/sign-up'];

// Clerk configuration
export const clerkConfig = {
  publishableKey: env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
  secretKey: serverEnv.CLERK_SECRET_KEY,
  webhookSecret: serverEnv.CLERK_WEBHOOK_SECRET,
};
</file>

<file path="src/lib/clerk/helpers.ts">
import { auth } from '@clerk/nextjs/server';
import { Webhook } from 'svix';
import type { WebhookEvent } from '@clerk/nextjs/server';

/**
 * Get current logged-in Clerk user ID
 * @returns Clerk user ID or null if not authenticated
 */
export async function getCurrentClerkUserId(): Promise<string | null> {
  const { userId } = await auth();
  return userId;
}

/**
 * Verify Clerk webhook signature
 * @param request - Request object
 * @param webhookSecret - Webhook secret from environment
 * @returns WebhookEvent or null if verification fails
 */
export async function verifyClerkWebhook(
  request: Request,
  webhookSecret: string
): Promise<WebhookEvent | null> {
  try {
    // Get the headers
    const svixId = request.headers.get('svix-id');
    const svixTimestamp = request.headers.get('svix-timestamp');
    const svixSignature = request.headers.get('svix-signature');

    // If there are no headers, error out
    if (!svixId || !svixTimestamp || !svixSignature) {
      return null;
    }

    // Get the body
    const payload = await request.text();

    // Create a new Svix instance with your webhook secret
    const wh = new Webhook(webhookSecret);

    // Verify the payload with the headers
    const evt = wh.verify(payload, {
      'svix-id': svixId,
      'svix-timestamp': svixTimestamp,
      'svix-signature': svixSignature,
    }) as WebhookEvent;

    return evt;
  } catch (error) {
    console.error('Error verifying Clerk webhook:', error);
    return null;
  }
}
</file>

<file path="src/lib/remote/api-client.ts">
import axios, { isAxiosError } from "axios";

const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL ?? "",
  headers: {
    "Content-Type": "application/json",
  },
});

type ErrorPayload = {
  error?: {
    message?: string;
  };
  message?: string;
};

export const extractApiErrorMessage = (
  error: unknown,
  fallbackMessage = "API request failed."
) => {
  if (isAxiosError(error)) {
    const payload = error.response?.data as ErrorPayload | undefined;

    if (typeof payload?.error?.message === "string") {
      return payload.error.message;
    }

    if (typeof payload?.message === "string") {
      return payload.message;
    }
  }

  if (error instanceof Error && error.message) {
    return error.message;
  }

  return fallbackMessage;
};

export { apiClient, isAxiosError };
</file>

<file path="src/lib/supabase/browser-client.ts">
"use client";

import { createBrowserClient } from "@supabase/ssr";
import type { SupabaseClient } from "@supabase/supabase-js";
import { env } from "@/constants/env";
import type { Database } from "./types";

let client: SupabaseClient<Database> | null = null;

export const getSupabaseBrowserClient = () => {
  if (!client) {
    client = createBrowserClient<Database>(
      env.NEXT_PUBLIC_SUPABASE_URL,
      env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
  }

  return client;
};
</file>

<file path="src/lib/supabase/client.ts">
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}
</file>

<file path="src/lib/supabase/server-client.ts">
import { cookies } from "next/headers";
import { createServerClient } from "@supabase/ssr";
import type { SupabaseClient } from "@supabase/supabase-js";
import { env } from "@/constants/env";
import type { Database } from "./types";

type WritableCookieStore = Awaited<ReturnType<typeof cookies>> & {
  set?: (options: {
    name: string;
    value: string;
    path?: string;
    expires?: Date;
    maxAge?: number;
    httpOnly?: boolean;
    sameSite?: "lax" | "strict" | "none";
    secure?: boolean;
  }) => void;
};

export const createSupabaseServerClient = async (): Promise<
  SupabaseClient<Database>
> => {
  const cookieStore = (await cookies()) as WritableCookieStore;

  return createServerClient<Database>(
    env.NEXT_PUBLIC_SUPABASE_URL,
    env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            if (typeof cookieStore.set === "function") {
              cookieStore.set({ name, value, ...options });
            }
          });
        },
      },
    }
  );
};
</file>

<file path="src/lib/supabase/types.ts">
export type Database = Record<string, never>;

export type SupabaseUserMetadata = Record<string, unknown>;
</file>

<file path="src/lib/toss/client.ts">
import type { TossPaymentConfirmRequest } from '@/types/payment';

const TOSS_API_BASE_URL = 'https://api.tosspayments.com/v1';

/**
 * Get authorization header for Toss Payments API
 */
function getAuthHeader(): string {
  const secretKey = process.env.TOSS_PAYMENTS_SECRET_KEY!;
  const encoded = Buffer.from(`${secretKey}:`).toString('base64');
  return `Basic ${encoded}`;
}

/**
 * Confirm payment with Toss Payments API
 * @param data - Payment confirmation data (paymentKey, orderId, amount)
 * @returns Payment confirmation response
 */
export async function confirmPayment(
  data: TossPaymentConfirmRequest
): Promise<any> {
  const response = await fetch(`${TOSS_API_BASE_URL}/payments/confirm`, {
    method: 'POST',
    headers: {
      Authorization: getAuthHeader(),
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Toss Payments error: ${error.message || 'Unknown error'}`);
  }

  return response.json();
}

export interface PayWithBillingKeyParams {
  billingKey: string;
  customerKey: string;
  amount: number;
  orderId: string;
  orderName: string;
}

/**
 * Pay with billing key (recurring payment)
 * @param params - Billing key payment parameters
 * @returns Payment response
 */
export async function payWithBillingKey(
  params: PayWithBillingKeyParams
): Promise<any> {
  const response = await fetch(
    `${TOSS_API_BASE_URL}/billing/${params.billingKey}`,
    {
      method: 'POST',
      headers: {
        Authorization: getAuthHeader(),
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        customerKey: params.customerKey,
        amount: params.amount,
        orderId: params.orderId,
        orderName: params.orderName,
      }),
    }
  );

  if (!response.ok) {
    const error = await response.json();
    throw new Error(
      `Toss Payments billing error: ${error.message || 'Unknown error'}`
    );
  }

  return response.json();
}

/**
 * Delete billing key
 * @param billingKey - Billing key to delete
 */
export async function deleteBillingKey(billingKey: string): Promise<void> {
  const response = await fetch(
    `${TOSS_API_BASE_URL}/billing/authorizations/issue`,
    {
      method: 'DELETE',
      headers: {
        Authorization: getAuthHeader(),
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ billingKey }),
    }
  );

  if (!response.ok) {
    const error = await response.json();
    throw new Error(
      `Toss Payments delete billing key error: ${error.message || 'Unknown error'}`
    );
  }
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/schemas/payment.ts">
import { z } from 'zod';

export const paymentConfirmSchema = z.object({
  paymentKey: z.string().min(1, '결제 키가 필요합니다'),
  orderId: z.string().min(1, '주문 ID가 필요합니다'),
  amount: z.number().int().positive('금액은 양수여야 합니다'),
});

export type PaymentConfirmInput = z.infer<typeof paymentConfirmSchema>;
</file>

<file path="src/types/analysis.ts">
// Analysis-related types for the Saju Analysis Service

// Gender
export type Gender = 'male' | 'female';

// AI Model type
export type ModelType = 'flash' | 'pro';

// Analysis information (Database type)
export interface Analysis {
  id: string;
  user_id: string;
  name: string;
  birth_date: string;
  birth_time: string | null;
  is_lunar: boolean;
  gender: Gender;
  time_zone: string | null;
  additional_info: string | null;
  analysis_result: string;
  model_used: ModelType;
  created_at: string;
}

// Create analysis input
export interface CreateAnalysisInput {
  name: string;
  birth_date: string;
  birth_time?: string;
  is_lunar: boolean;
  gender: Gender;
  time_zone?: string;
  additional_info?: string;
}
</file>

<file path="src/types/payment.ts">
// Payment-related types for Toss Payments integration

// Payment status
export type PaymentStatus = 'done' | 'cancelled' | 'failed';

// Payment information (Database type)
export interface Payment {
  id: string;
  user_id: string;
  order_id: string;
  payment_key: string;
  amount: number;
  status: PaymentStatus;
  created_at: string;
}

// Billing key information
export interface BillingKey {
  id: string;
  user_id: string;
  billing_key: string;
  created_at: string;
}

// Toss Payments confirm request
export interface TossPaymentConfirmRequest {
  paymentKey: string;
  orderId: string;
  amount: number;
}
</file>

<file path="src/types/user.ts">
// User-related types for the Saju Analysis Service

// Subscription tiers
export type SubscriptionTier = 'free' | 'pro';

// User information (Database type)
export interface User {
  id: string;
  clerk_user_id: string;
  email: string;
  first_name: string | null;
  subscription_tier: SubscriptionTier;
  subscription_ends_at: string | null;
  analyses_remaining: number;
  cancelled_at: string | null;
  created_at: string;
  updated_at: string;
}

// Subscription status (computed state)
export type SubscriptionStatus =
  | { type: 'free' }
  | { type: 'pro_active'; endsAt: Date; remaining: number }
  | { type: 'pro_cancelled'; endsAt: Date; remaining: number }
  | { type: 'pro_expired' };
</file>

<file path="src/utils/date.ts">
import { format, formatDistanceToNow, parseISO } from 'date-fns';
import { ko } from 'date-fns/locale';

/**
 * Format date string to Korean format
 * @param dateString - ISO date string (e.g., "2025-01-15")
 * @returns Formatted date (e.g., "2025년 1월 15일")
 */
export function formatDate(dateString: string): string {
  const date = parseISO(dateString);
  return format(date, 'yyyy년 M월 d일', { locale: ko });
}

/**
 * Format datetime string to Korean format with time
 * @param dateString - ISO datetime string (e.g., "2025-01-15T10:30:00Z")
 * @returns Formatted datetime (e.g., "2025년 1월 15일 10:30")
 */
export function formatDateTime(dateString: string): string {
  const date = parseISO(dateString);
  return format(date, 'yyyy년 M월 d일 HH:mm', { locale: ko });
}

/**
 * Format relative time from now
 * @param dateString - ISO datetime string (e.g., "2025-01-15T10:30:00Z")
 * @returns Relative time (e.g., "3일 전")
 */
export function formatRelativeTime(dateString: string): string {
  const date = parseISO(dateString);
  return formatDistanceToNow(date, { addSuffix: true, locale: ko });
}
</file>

<file path="src/utils/error.ts">
/**
 * API Error type
 */
export type ApiError = {
  code: string;
  message: string;
  details?: unknown;
};

/**
 * Check if error is an ApiError
 */
export function isApiError(error: unknown): error is ApiError {
  return (
    typeof error === 'object' &&
    error !== null &&
    'code' in error &&
    'message' in error &&
    typeof (error as ApiError).code === 'string' &&
    typeof (error as ApiError).message === 'string'
  );
}

/**
 * Convert unknown error to user-friendly message
 */
export function getErrorMessage(error: unknown): string {
  // ApiError
  if (isApiError(error)) {
    return error.message;
  }

  // Standard Error
  if (error instanceof Error) {
    return error.message;
  }

  // String error
  if (typeof error === 'string') {
    return error;
  }

  // Object with message
  if (typeof error === 'object' && error !== null && 'message' in error) {
    const msg = (error as { message: unknown }).message;
    if (typeof msg === 'string') {
      return msg;
    }
  }

  // Unknown error
  return '알 수 없는 오류가 발생했습니다. 다시 시도해주세요.';
}
</file>

<file path="src/utils/subscription.ts">
import type { User, SubscriptionStatus } from '@/types/user';

/**
 * Calculate subscription status from user data
 * @param user - User object from database
 * @returns Computed subscription status
 */
export function calculateSubscriptionStatus(user: User): SubscriptionStatus {
  // Free tier
  if (user.subscription_tier === 'free') {
    return { type: 'free' };
  }

  // Pro tier
  if (user.subscription_tier === 'pro') {
    const endsAt = user.subscription_ends_at ? new Date(user.subscription_ends_at) : null;
    const now = new Date();

    // Pro expired
    if (!endsAt || endsAt <= now) {
      return { type: 'pro_expired' };
    }

    // Pro cancelled (but still active until end date)
    if (user.cancelled_at !== null) {
      return {
        type: 'pro_cancelled',
        endsAt,
        remaining: user.analyses_remaining,
      };
    }

    // Pro active
    return {
      type: 'pro_active',
      endsAt,
      remaining: user.analyses_remaining,
    };
  }

  // Fallback to free (should not happen)
  return { type: 'free' };
}
</file>

<file path="supabase/migrations/0001_create_example_table.sql">
-- Migration: create example table for backend reference implementation
-- Ensures pgcrypto available for gen_random_uuid
create extension if not exists "pgcrypto";

create table if not exists public.example (
  id uuid primary key default gen_random_uuid(),
  full_name text,
  avatar_url text,
  bio text,
  updated_at timestamptz not null default now()
);

comment on table public.example is 'Example table used by the hono + next.js starter backend layer.';

insert into public.example (full_name, avatar_url, bio)
values
  (
    'Jane Example',
    'https://picsum.photos/seed/jane-example/200/200',
    'Demonstration record generated by the starter migration.'
  )
  on conflict do nothing;

ALTER TABLE IF EXISTS public.example DISABLE ROW LEVEL SECURITY;
</file>

<file path="supabase/migrations/0002_create_saju_tables.sql">
-- Migration: Create tables for Saju Analysis Service
-- Description: Creates users, analyses, payments, and billing_keys tables

-- Ensure pgcrypto extension is available for gen_random_uuid
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 1. users table
CREATE TABLE IF NOT EXISTS public.users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  clerk_user_id VARCHAR(255) UNIQUE NOT NULL,
  email VARCHAR(255) NOT NULL,
  first_name VARCHAR(100),
  subscription_tier VARCHAR(20) NOT NULL DEFAULT 'free',
  subscription_ends_at TIMESTAMP WITH TIME ZONE,
  analyses_remaining INTEGER NOT NULL DEFAULT 3,
  cancelled_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT check_subscription_tier CHECK (subscription_tier IN ('free', 'pro')),
  CONSTRAINT check_analyses_remaining CHECK (analyses_remaining >= 0)
);

CREATE INDEX IF NOT EXISTS idx_users_clerk_user_id ON public.users(clerk_user_id);
CREATE INDEX IF NOT EXISTS idx_users_subscription_ends ON public.users(subscription_ends_at)
  WHERE subscription_ends_at IS NOT NULL;

COMMENT ON TABLE public.users IS 'Users table with Clerk integration and subscription management';

-- 2. analyses table
CREATE TABLE IF NOT EXISTS public.analyses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL,
  birth_date DATE NOT NULL,
  birth_time TIME,
  is_lunar BOOLEAN NOT NULL DEFAULT FALSE,
  gender VARCHAR(10) NOT NULL,
  additional_info TEXT,
  analysis_result TEXT NOT NULL,
  model_used VARCHAR(50) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT check_gender CHECK (gender IN ('male', 'female'))
);

CREATE INDEX IF NOT EXISTS idx_analyses_user_created ON public.analyses(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_analyses_name ON public.analyses(user_id, name);

COMMENT ON TABLE public.analyses IS 'Saju analysis results';

-- 3. payments table
CREATE TABLE IF NOT EXISTS public.payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  order_id VARCHAR(255) UNIQUE NOT NULL,
  payment_key VARCHAR(255) UNIQUE NOT NULL,
  amount INTEGER NOT NULL,
  status VARCHAR(20) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT check_status CHECK (status IN ('done', 'cancelled', 'failed')),
  CONSTRAINT check_amount CHECK (amount > 0)
);

CREATE INDEX IF NOT EXISTS idx_payments_user_id ON public.payments(user_id);

COMMENT ON TABLE public.payments IS 'Payment history with Toss Payments integration';

-- 4. billing_keys table
CREATE TABLE IF NOT EXISTS public.billing_keys (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID UNIQUE NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  billing_key VARCHAR(255) UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

COMMENT ON TABLE public.billing_keys IS 'Toss Payments billing keys for auto-renewal';

-- 5. Trigger: updated_at auto-update
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_users_updated_at ON public.users;
CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON public.users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

-- 6. Row Level Security (RLS) - Disable for now since we're using service role
-- We're using Supabase service role key on the server side
-- RLS policies would be needed if we were using client-side queries with anon key
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.analyses DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.billing_keys DISABLE ROW LEVEL SECURITY;
</file>

<file path=".cursorignore">
pnpm-lock.yaml
yarn.lock
package-lock.json
</file>

<file path=".npmrc">
legacy-peer-deps=true
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.mjs">
import { dirname } from 'path';
import { fileURLToPath } from 'url';
import { FlatCompat } from '@eslint/eslintrc';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends('next/core-web-vitals', 'next/typescript'),
  {
    rules: {
      '@typescript-eslint/no-empty-object-type': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-unused-vars': 'off',
    },
  },
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  eslint: {
    ignoreDuringBuilds: true,
  },
  distDir: process.env.NODE_ENV === "development" ? ".next-dev" : ".next",

  images: {
    remotePatterns: [
      {
        hostname: "**",
      },
    ],
  },
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

export default config;
</file>

<file path="test-gemini.js">
// Simple Gemini API test script
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: '.env.local' });

async function testGemini() {
  const apiKey = process.env.GOOGLE_GEMINI_API_KEY;

  if (!apiKey) {
    console.error('❌ GOOGLE_GEMINI_API_KEY가 설정되지 않았습니다.');
    process.exit(1);
  }

  console.log('🔑 API Key:', apiKey.substring(0, 10) + '...');
  console.log('');

  const genAI = new GoogleGenerativeAI(apiKey);

  // List available models
  console.log('📋 사용 가능한 모델 목록:');
  try {
    const models = await genAI.listModels();
    for await (const model of models) {
      console.log(`  - ${model.name} (${model.displayName})`);
    }
    console.log('');
  } catch (error) {
    console.error('❌ 모델 목록 가져오기 실패:', error.message);
  }

  // Test gemini-2.5-flash
  console.log('📝 Testing gemini-2.5-flash...');
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
    const result = await model.generateContent('안녕하세요! 간단한 사주 분석 테스트입니다. 짧게 답변해주세요.');
    const text = result.response.text();
    console.log('✅ gemini-2.5-flash 성공!');
    console.log('응답:', text);
    console.log('');
  } catch (error) {
    console.error('❌ gemini-2.5-flash 실패:', error.message);
    console.log('');
  }

  // Test gemini-2.5-pro
  console.log('📝 Testing gemini-2.5-pro...');
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-pro' });
    const result = await model.generateContent('안녕하세요! 간단한 사주 분석 테스트입니다. 짧게 답변해주세요.');
    const text = result.response.text();
    console.log('✅ gemini-2.5-pro 성공!');
    console.log('응답:', text);
  } catch (error) {
    console.error('❌ gemini-2.5-pro 실패:', error.message);
  }
}

testGemini().catch(console.error);
</file>

<file path="src/app/(protected)/dashboard/components/AnalysesList.tsx">
'use client';

import { useState, useCallback } from 'react';
import type { Analysis } from '@/types/analysis';
import { AnalysisCard } from './AnalysisCard';
import { SearchBar } from './SearchBar';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { Plus } from 'lucide-react';

interface AnalysesListProps {
  initialAnalyses: Analysis[];
}

export function AnalysesList({ initialAnalyses }: AnalysesListProps) {
  const [searchQuery, setSearchQuery] = useState('');

  // Filter analyses based on search query
  const filteredAnalyses = initialAnalyses.filter((analysis) =>
    analysis.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleSearch = useCallback((query: string) => {
    setSearchQuery(query);
  }, []);

  return (
    <div className="space-y-6">
      <SearchBar onSearch={handleSearch} />

      {filteredAnalyses.length === 0 ? (
        <div className="flex min-h-[300px] items-center justify-center rounded-lg border border-dashed">
          <p className="text-sm text-muted-foreground">
            {searchQuery
              ? '검색 결과가 없습니다'
              : '분석 내역이 없습니다'}
          </p>
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {filteredAnalyses.map((analysis) => (
            <AnalysisCard key={analysis.id} analysis={analysis} />
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/app/(protected)/dashboard/components/EmptyState.tsx">
import { Button } from '@/components/ui/button';
import { FolderOpen } from 'lucide-react';
import Link from 'next/link';

export function EmptyState() {
  return (
    <div className="flex min-h-[400px] flex-col items-center justify-center text-center">
      <div className="mb-6 flex h-32 w-32 items-center justify-center rounded-full bg-muted/50">
        <FolderOpen className="h-16 w-16 text-muted-foreground/50" />
      </div>
      <h3 className="mb-2 text-lg font-semibold">아직 검사 내역이 없습니다</h3>
      <p className="mb-6 text-sm text-muted-foreground">
        첫 검사를 시작해보세요!
      </p>
      <Button asChild size="lg">
        <Link href="/analysis/new">새 검사하기</Link>
      </Button>
    </div>
  );
}
</file>

<file path="src/app/(protected)/subscription/upgrade/page.tsx">
import { auth, currentUser } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { SUBSCRIPTION } from '@/constants/app';
import { Check } from 'lucide-react';
import { CardPaymentForm } from './components/CardPaymentForm';

export default async function SubscriptionUpgradePage() {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  const clerkUser = await currentUser();
  const supabase = await createClient();
  const user = await getUserByClerkId(supabase, userId);

  if (!user) {
    redirect('/dashboard');
  }

  const userEmail = clerkUser?.emailAddresses[0]?.emailAddress || user.email;
  const userName = user.first_name || clerkUser?.firstName || '고객님';

  return (
    <div className="container mx-auto max-w-2xl px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Pro 요금제 업그레이드</h1>
        <p className="mt-2 text-muted-foreground">
          더 정확하고 상세한 AI 사주 분석을 경험하세요
        </p>
      </div>

      <div className="space-y-6">
        {/* Pricing Card */}
        <Card>
          <CardHeader>
            <CardTitle className="text-2xl">Pro 요금제</CardTitle>
            <CardDescription>
              <span className="text-3xl font-bold text-foreground">
                {SUBSCRIPTION.PRO_PRICE.toLocaleString()}원
              </span>
              <span className="text-muted-foreground">/월</span>
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ul className="space-y-3">
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                <span>매달 {SUBSCRIPTION.PRO_ANALYSES_COUNT}회 분석</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                <span>Gemini 2.5 Pro 모델 사용</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                <span>더 깊이 있고 전문적인 분석</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                <span>분석 내역 영구 보관</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                <span>자동 정기결제</span>
              </li>
              <li className="flex items-start gap-2">
                <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                <span>언제든지 구독 취소 가능</span>
              </li>
            </ul>
          </CardContent>
        </Card>

        {/* Payment Widget */}
        <Card>
          <CardHeader>
            <CardTitle>결제 정보</CardTitle>
            <CardDescription>
              토스페이먼츠를 통해 안전하게 결제됩니다
            </CardDescription>
          </CardHeader>
          <CardContent>
            <CardPaymentForm
              userId={userId}
              userEmail={userEmail}
              userName={userName}
            />
          </CardContent>
        </Card>

        {/* Terms */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2 text-sm text-muted-foreground">
              <p>• 구독은 매달 자동으로 갱신됩니다</p>
              <p>• 다음 결제일 24시간 전까지 언제든지 취소 가능합니다</p>
              <p>• 취소 시 현재 구독 기간까지는 Pro 혜택을 이용하실 수 있습니다</p>
              <p>• 부분 환불은 제공되지 않습니다</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(protected)/subscription/page.tsx">
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { calculateSubscriptionStatus } from '@/utils/subscription';
import { formatDate } from '@/utils/date';
import { SUBSCRIPTION } from '@/constants/app';
import Link from 'next/link';
import { CancelSubscriptionButton } from './components/CancelSubscriptionButton';

export default async function SubscriptionPage() {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  const supabase = await createClient();
  const user = await getUserByClerkId(supabase, userId);

  if (!user) {
    redirect('/dashboard');
  }

  const status = calculateSubscriptionStatus(user);

  return (
    <div className="container mx-auto max-w-3xl px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">구독 관리</h1>
        <p className="mt-2 text-muted-foreground">
          현재 구독 정보를 확인하고 관리하세요
        </p>
      </div>

      <div className="space-y-6">
        {/* Current Subscription Card */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>현재 구독</CardTitle>
              <Badge variant={status.type === 'free' ? 'secondary' : 'default'}>
                {status.type === 'free' ? 'Free' : 'Pro'}
              </Badge>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {status.type === 'free' && (
              <>
                <div>
                  <p className="text-sm font-medium">요금제</p>
                  <p className="text-2xl font-bold">무료</p>
                </div>
                <div>
                  <p className="text-sm font-medium">남은 분석 횟수</p>
                  <p className="text-lg">{user.analyses_remaining}/{SUBSCRIPTION.FREE_ANALYSES_COUNT}회</p>
                </div>
                <div>
                  <p className="text-sm font-medium">사용 모델</p>
                  <p className="text-lg">Gemini 2.5 Flash</p>
                </div>
              </>
            )}

            {status.type === 'pro_active' && (
              <>
                <div>
                  <p className="text-sm font-medium">요금제</p>
                  <p className="text-2xl font-bold">Pro (활성)</p>
                </div>
                <div>
                  <p className="text-sm font-medium">월 요금</p>
                  <p className="text-lg">{SUBSCRIPTION.PRO_PRICE.toLocaleString()}원</p>
                </div>
                <div>
                  <p className="text-sm font-medium">남은 분석 횟수</p>
                  <p className="text-lg">{status.remaining}/{SUBSCRIPTION.PRO_ANALYSES_COUNT}회</p>
                </div>
                <div>
                  <p className="text-sm font-medium">다음 결제일</p>
                  <p className="text-lg">{formatDate(status.endsAt.toISOString())}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">사용 모델</p>
                  <p className="text-lg">Gemini 2.5 Pro</p>
                </div>
              </>
            )}

            {status.type === 'pro_cancelled' && (
              <>
                <div>
                  <p className="text-sm font-medium">요금제</p>
                  <p className="text-2xl font-bold">Pro (취소 예정)</p>
                </div>
                <div>
                  <p className="text-sm font-medium">남은 분석 횟수</p>
                  <p className="text-lg">{status.remaining}/{SUBSCRIPTION.PRO_ANALYSES_COUNT}회</p>
                </div>
                <div>
                  <p className="text-sm font-medium">종료일</p>
                  <p className="text-lg">{formatDate(status.endsAt.toISOString())}</p>
                </div>
                <div className="rounded-lg border border-yellow-500 bg-yellow-500/10 p-4">
                  <p className="text-sm text-yellow-700 dark:text-yellow-400">
                    구독이 {formatDate(status.endsAt.toISOString())}에 종료됩니다.
                    이후 무료 요금제로 전환됩니다.
                  </p>
                </div>
              </>
            )}

            {status.type === 'pro_expired' && (
              <>
                <div>
                  <p className="text-sm font-medium">요금제</p>
                  <p className="text-2xl font-bold">Free (Pro 만료)</p>
                </div>
                <div className="rounded-lg border border-destructive bg-destructive/10 p-4">
                  <p className="text-sm text-destructive">
                    Pro 구독이 만료되어 무료 요금제로 전환되었습니다.
                  </p>
                </div>
              </>
            )}
          </CardContent>
          <CardFooter className="flex gap-3">
            {status.type === 'free' && (
              <Button asChild className="w-full">
                <Link href="/subscription/upgrade">Pro 요금제로 업그레이드</Link>
              </Button>
            )}

            {status.type === 'pro_active' && (
              <CancelSubscriptionButton />
            )}

            {status.type === 'pro_cancelled' && (
              <Button asChild className="w-full">
                <Link href="/subscription/upgrade">구독 재개</Link>
              </Button>
            )}

            {status.type === 'pro_expired' && (
              <Button asChild className="w-full">
                <Link href="/subscription/upgrade">Pro 요금제 재구독</Link>
              </Button>
            )}
          </CardFooter>
        </Card>

        {/* Pro Benefits Card */}
        {status.type === 'free' && (
          <Card>
            <CardHeader>
              <CardTitle>Pro 요금제 혜택</CardTitle>
              <CardDescription>더 정확하고 상세한 분석을 경험하세요</CardDescription>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                <li className="flex items-start gap-2">
                  <span className="text-primary">✓</span>
                  <span>매달 {SUBSCRIPTION.PRO_ANALYSES_COUNT}회 분석</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-primary">✓</span>
                  <span>Gemini 2.5 Pro 모델 사용</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-primary">✓</span>
                  <span>더 깊이 있고 전문적인 분석</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-primary">✓</span>
                  <span>자동 정기결제로 편리한 관리</span>
                </li>
              </ul>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/api/analyses/create/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';
import { createAnalysisSchema } from '@/schemas/analysis';
import { generateSajuAnalysis } from '@/lib/gemini/client';
import { MODEL_BY_TIER } from '@/constants/app';

export async function POST(request: NextRequest) {
  try {
    // Authenticate user
    const { userId } = await auth();

    if (!userId) {
      return NextResponse.json(
        { message: '인증이 필요합니다' },
        { status: 401 }
      );
    }

    // Parse and validate request body
    const body = await request.json();
    const validationResult = createAnalysisSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        { message: '입력값이 올바르지 않습니다', errors: validationResult.error.errors },
        { status: 400 }
      );
    }

    const input = validationResult.data;

    // Get user from database
    const supabase = await createClient();
    const user = await getUserByClerkId(supabase, userId);

    if (!user) {
      return NextResponse.json(
        { message: '사용자를 찾을 수 없습니다' },
        { status: 404 }
      );
    }

    // Check analyses remaining
    if (user.analyses_remaining <= 0) {
      return NextResponse.json(
        { message: '남은 분석 횟수가 없습니다', code: 'ANALYSES_LIMIT_REACHED' },
        { status: 403 }
      );
    }

    // Check Pro subscription validity
    if (user.subscription_tier === 'pro') {
      const now = new Date();
      const endsAt = user.subscription_ends_at ? new Date(user.subscription_ends_at) : null;

      if (!endsAt || endsAt <= now) {
        return NextResponse.json(
          { message: 'Pro 구독이 만료되었습니다', code: 'SUBSCRIPTION_EXPIRED' },
          { status: 403 }
        );
      }
    }

    // Select model based on subscription tier
    const model = MODEL_BY_TIER[user.subscription_tier];

    // Generate analysis with Gemini
    let analysisResult: string;
    try {
      analysisResult = await generateSajuAnalysis({
        name: input.name,
        birthDate: input.birth_date,
        birthTime: input.birth_time,
        isLunar: input.is_lunar,
        gender: input.gender,
        additionalInfo: input.additional_info,
        model,
      });
    } catch (error) {
      console.error('Gemini API error:', error);
      return NextResponse.json(
        { message: '분석 중 오류가 발생했습니다', code: 'GEMINI_API_ERROR' },
        { status: 500 }
      );
    }

    // Start transaction: Create analysis + Decrement count
    const { data: analysis, error: insertError } = await supabase
      .from('analyses')
      .insert({
        user_id: user.id,
        name: input.name,
        birth_date: input.birth_date,
        birth_time: input.birth_time || null,
        is_lunar: input.is_lunar,
        gender: input.gender,
        additional_info: input.additional_info || null,
        analysis_result: analysisResult,
        model_used: user.subscription_tier === 'pro' ? 'pro' : 'flash',
      })
      .select()
      .single();

    if (insertError) {
      console.error('Insert analysis error:', insertError);
      return NextResponse.json(
        { message: '분석 결과 저장에 실패했습니다' },
        { status: 500 }
      );
    }

    // Decrement analyses remaining
    const { error: updateError } = await supabase
      .from('users')
      .update({ analyses_remaining: user.analyses_remaining - 1 })
      .eq('id', user.id)
      .gte('analyses_remaining', 1);

    if (updateError) {
      console.error('Update analyses_remaining error:', updateError);
      // Analysis already created, but count not decremented
      // This is acceptable - user got the analysis
    }

    return NextResponse.json({
      success: true,
      analysisId: analysis.id,
    });
  } catch (error) {
    console.error('Unexpected error:', error);
    return NextResponse.json(
      { message: '서버 오류가 발생했습니다' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/webhooks/clerk/route.ts">
import { headers } from 'next/headers';
import { Webhook } from 'svix';
import { WebhookEvent } from '@clerk/nextjs/server';
import { createPureClient } from '@/lib/supabase/server';

export async function POST(req: Request) {
  // Get the webhook secret from environment variables
  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET;

  if (!WEBHOOK_SECRET) {
    throw new Error('Please add CLERK_WEBHOOK_SECRET from Clerk Dashboard to .env.local');
  }

  // Get the headers
  const headerPayload = await headers();
  const svix_id = headerPayload.get('svix-id');
  const svix_timestamp = headerPayload.get('svix-timestamp');
  const svix_signature = headerPayload.get('svix-signature');

  // If there are no headers, error out
  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new Response('Error occured -- no svix headers', {
      status: 400,
    });
  }

  // Get the body
  const payload = await req.json();
  const body = JSON.stringify(payload);

  // Create a new Svix instance with your secret.
  const wh = new Webhook(WEBHOOK_SECRET);

  let evt: WebhookEvent;

  // Verify the payload with the headers
  try {
    evt = wh.verify(body, {
      'svix-id': svix_id,
      'svix-timestamp': svix_timestamp,
      'svix-signature': svix_signature,
    }) as WebhookEvent;
  } catch (err) {
    console.error('Error verifying webhook:', err);
    return new Response('Error occured', {
      status: 400,
    });
  }

  // Handle the webhook
  const eventType = evt.type;

  if (eventType === 'user.created') {
    const { id, email_addresses, first_name } = evt.data;

    try {
      const supabase = await createPureClient();

      // Get email - handle both test webhooks and real user creation
      let email = '';
      if (email_addresses && Array.isArray(email_addresses) && email_addresses.length > 0) {
        email = email_addresses[0]?.email_address || '';
      }

      // If no email (e.g., test webhook), use placeholder
      if (!email) {
        console.warn('No email in webhook payload, this might be a test event');
        email = `temp_${id}@clerk-webhook-test.local`;
      }

      // Insert user into Supabase
      const { error } = await supabase.from('users').insert({
        clerk_user_id: id,
        email: email,
        first_name: first_name || null,
        subscription_tier: 'free',
        analyses_remaining: 3,
      });

      if (error) {
        console.error('Error creating user in Supabase:', error);
        console.error('User ID:', id, 'Email:', email);
        return new Response('Error creating user', { status: 500 });
      }

      console.log('✅ User created in Supabase:', id, 'Email:', email);
    } catch (error) {
      console.error('Error processing user.created webhook:', error);
      return new Response('Error processing webhook', { status: 500 });
    }
  }

  if (eventType === 'user.deleted') {
    const { id } = evt.data;

    try {
      const supabase = await createPureClient();

      // Delete user from Supabase (CASCADE will delete related records)
      const { error } = await supabase
        .from('users')
        .delete()
        .eq('clerk_user_id', id);

      if (error) {
        console.error('Error deleting user from Supabase:', error);
        return new Response('Error deleting user', { status: 500 });
      }

      console.log('✅ User deleted from Supabase:', id);
    } catch (error) {
      console.error('Error processing user.deleted webhook:', error);
      return new Response('Error processing webhook', { status: 500 });
    }
  }

  return new Response('Webhook processed successfully', { status: 200 });
}
</file>

<file path="src/app/components/FAQSection.tsx">
'use client';

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { SUBSCRIPTION } from '@/constants/app';

const faqs = [
  {
    question: '무료 체험은 몇 번까지 가능한가요?',
    answer: `가입 후 무료로 ${SUBSCRIPTION.FREE_ANALYSES_COUNT}회까지 사주 분석을 이용할 수 있습니다. 무료 체험 횟수를 모두 사용하신 후에는 Pro 요금제로 업그레이드하여 계속 이용하실 수 있습니다.`,
  },
  {
    question: 'Pro 구독은 어떻게 결제하나요?',
    answer: `Pro 구독은 토스페이먼츠를 통해 안전하게 결제됩니다. 월 ${SUBSCRIPTION.PRO_PRICE.toLocaleString()}원으로 매달 ${SUBSCRIPTION.PRO_ANALYSES_COUNT}회의 분석을 이용할 수 있으며, 자동 정기결제로 편리하게 관리됩니다.`,
  },
  {
    question: '출생 시간을 모르면 분석이 불가능한가요?',
    answer: '출생 시간을 모르시는 경우에도 분석이 가능합니다. "출생시간 모름" 옵션을 선택하시면 삼주(년, 월, 일주) 기반으로 분석이 진행됩니다. 다만, 시주가 포함된 사주팔자 분석보다는 일부 정보가 제한될 수 있습니다.',
  },
  {
    question: '구독을 취소하면 환불이 되나요?',
    answer: '구독을 취소하시면 다음 결제일까지는 Pro 혜택을 계속 이용하실 수 있으며, 이후 자동으로 Free 요금제로 전환됩니다. 이미 결제된 금액에 대한 부분 환불은 제공되지 않습니다.',
  },
  {
    question: '과거 분석 내역을 확인할 수 있나요?',
    answer: '네, 모든 분석 내역은 자동으로 저장되어 대시보드에서 언제든지 확인하실 수 있습니다. 분석 결과는 영구적으로 보관되며, 검색 기능을 통해 특정 분석을 쉽게 찾을 수 있습니다.',
  },
  {
    question: 'Gemini Flash와 Pro 모델의 차이는 무엇인가요?',
    answer: 'Gemini 2.5 Flash는 빠르고 효율적인 분석을 제공하는 모델이며, Gemini 2.5 Pro는 더 깊이 있고 상세한 분석을 제공합니다. Pro 모델은 더 많은 컨텍스트를 이해하고 더 전문적인 통찰을 제공합니다.',
  },
];

export function FAQSection() {
  return (
    <section id="faq" className="container mx-auto px-4 py-20 scroll-mt-16">
      <div className="mb-12 text-center">
        <h2 className="text-3xl font-bold">자주 묻는 질문</h2>
        <p className="mt-4 text-muted-foreground">
          궁금하신 점을 확인해보세요
        </p>
      </div>
      <div className="mx-auto max-w-3xl">
        <Accordion type="single" collapsible className="w-full">
          {faqs.map((faq, index) => (
            <AccordionItem key={index} value={`item-${index}`}>
              <AccordionTrigger>{faq.question}</AccordionTrigger>
              <AccordionContent>{faq.answer}</AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </section>
  );
}
</file>

<file path="src/app/components/FeaturesSection.tsx">
import { Card, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Sparkles, DollarSign, History, LogIn } from 'lucide-react';

const features = [
  {
    icon: Sparkles,
    title: 'AI 기반 정확한 분석',
    description: 'Google Gemini AI가 25년 경력 전문가의 관점으로 사주팔자를 분석합니다.',
  },
  {
    icon: DollarSign,
    title: '합리적인 가격',
    description: '무료로 3회 체험 후, 월 3,900원으로 매달 10회 이용 가능합니다.',
  },
  {
    icon: History,
    title: '분석 내역 보관 및 관리',
    description: '모든 분석 내역이 자동 저장되어 언제든지 다시 확인할 수 있습니다.',
  },
  {
    icon: LogIn,
    title: '간편한 Google 로그인',
    description: 'Google 계정으로 간편하게 가입하고 바로 시작하세요.',
  },
];

export function FeaturesSection() {
  return (
    <section id="features" className="container mx-auto px-4 py-20 scroll-mt-16">
      <div className="mb-12 text-center">
        <h2 className="text-3xl font-bold">왜 저희 서비스를 선택해야 하나요?</h2>
        <p className="mt-4 text-muted-foreground">
          AI 기술과 전통 명리학의 만남
        </p>
      </div>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        {features.map((feature) => {
          const Icon = feature.icon;
          return (
            <Card key={feature.title}>
              <CardHeader>
                <Icon className="mb-2 h-10 w-10 text-primary" />
                <CardTitle>{feature.title}</CardTitle>
                <CardDescription>{feature.description}</CardDescription>
              </CardHeader>
            </Card>
          );
        })}
      </div>
    </section>
  );
}
</file>

<file path="src/app/components/PricingSection.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Check } from 'lucide-react';
import { SUBSCRIPTION } from '@/constants/app';
import Link from 'next/link';

const plans = [
  {
    name: 'Free',
    price: '0원',
    description: '무료로 체험해보세요',
    features: [
      `${SUBSCRIPTION.FREE_ANALYSES_COUNT}회 무료 분석`,
      'Gemini 2.5 Flash 모델',
      '분석 내역 영구 보관',
      'Google 간편 로그인',
    ],
    cta: '무료로 시작하기',
    ctaLink: '/sign-up',
    highlighted: false,
  },
  {
    name: 'Pro',
    price: `${SUBSCRIPTION.PRO_PRICE.toLocaleString()}원/월`,
    description: '더 정확한 분석을 원한다면',
    features: [
      `매달 ${SUBSCRIPTION.PRO_ANALYSES_COUNT}회 분석`,
      'Gemini 2.5 Pro 모델',
      '더 상세하고 정확한 분석',
      '분석 내역 영구 보관',
      '자동 정기결제',
      '언제든지 구독 취소 가능',
    ],
    cta: 'Pro로 업그레이드',
    ctaLink: '/subscription/upgrade',
    highlighted: true,
  },
];

export function PricingSection() {
  return (
    <section id="pricing" className="container mx-auto px-4 py-20 scroll-mt-16">
      <div className="mb-12 text-center">
        <h2 className="text-3xl font-bold">요금제</h2>
        <p className="mt-4 text-muted-foreground">
          필요에 맞는 요금제를 선택하세요
        </p>
      </div>
      <div className="grid gap-8 md:grid-cols-2 lg:max-w-4xl lg:mx-auto">
        {plans.map((plan) => (
          <Card
            key={plan.name}
            className={plan.highlighted ? 'border-primary shadow-lg' : ''}
          >
            <CardHeader>
              <CardTitle className="text-2xl">{plan.name}</CardTitle>
              <CardDescription>{plan.description}</CardDescription>
              <div className="mt-4">
                <span className="text-4xl font-bold">{plan.price}</span>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="space-y-3">
                {plan.features.map((feature) => (
                  <li key={feature} className="flex items-start gap-2">
                    <Check className="h-5 w-5 text-primary flex-shrink-0 mt-0.5" />
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
            <CardFooter>
              <Button
                className="w-full"
                variant={plan.highlighted ? 'default' : 'outline'}
                size="lg"
                asChild
              >
                <Link href={plan.ctaLink}>{plan.cta}</Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </section>
  );
}
</file>

<file path="src/app/login/page.tsx">
"use client";

import { Suspense, useCallback, useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter, useSearchParams } from "next/navigation";
import { getSupabaseBrowserClient } from "@/lib/supabase/browser-client";
import { useCurrentUser } from "@/features/auth/hooks/useCurrentUser";

type LoginPageProps = {
  params: Promise<Record<string, never>>;
};

function LoginForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { refresh, isAuthenticated } = useCurrentUser();
  const [formState, setFormState] = useState({ email: "", password: "" });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  useEffect(() => {
    if (isAuthenticated) {
      const redirectedFrom = searchParams.get("redirectedFrom") ?? "/";
      router.replace(redirectedFrom);
    }
  }, [isAuthenticated, router, searchParams]);

  const handleChange = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const { name, value } = event.target;
      setFormState((prev) => ({ ...prev, [name]: value }));
    },
    []
  );

  const handleSubmit = useCallback(
    async (event: React.FormEvent<HTMLFormElement>) => {
      event.preventDefault();
      setIsSubmitting(true);
      setErrorMessage(null);
      const supabase = getSupabaseBrowserClient();

      try {
        const result = await supabase.auth.signInWithPassword({
          email: formState.email,
          password: formState.password,
        });

        const nextAction = result.error
          ? result.error.message ?? "로그인에 실패했습니다."
          : ("success" as const);

        if (nextAction === "success") {
          await refresh();
          const redirectedFrom = searchParams.get("redirectedFrom") ?? "/";
          router.replace(redirectedFrom);
        } else {
          setErrorMessage(nextAction);
        }
      } catch (error) {
        setErrorMessage("로그인 처리 중 오류가 발생했습니다.");
      } finally {
        setIsSubmitting(false);
      }
    },
    [formState.email, formState.password, refresh, router, searchParams]
  );

  if (isAuthenticated) {
    return null;
  }

  return (
    <div className="mx-auto flex min-h-screen w-full max-w-4xl flex-col items-center justify-center gap-10 px-6 py-16">
      <header className="flex flex-col items-center gap-3 text-center">
        <h1 className="text-3xl font-semibold">로그인</h1>
        <p className="text-slate-500">
          Supabase 계정으로 로그인하고 보호된 페이지에 접근하세요.
        </p>
      </header>
      <div className="grid w-full gap-8 md:grid-cols-2">
        <form
          onSubmit={handleSubmit}
          className="flex flex-col gap-4 rounded-xl border border-slate-200 p-6 shadow-sm"
        >
          <label className="flex flex-col gap-2 text-sm text-slate-700">
            이메일
            <input
              type="email"
              name="email"
              autoComplete="email"
              required
              value={formState.email}
              onChange={handleChange}
              className="rounded-md border border-slate-300 px-3 py-2 focus:border-slate-500 focus:outline-none"
            />
          </label>
          <label className="flex flex-col gap-2 text-sm text-slate-700">
            비밀번호
            <input
              type="password"
              name="password"
              autoComplete="current-password"
              required
              value={formState.password}
              onChange={handleChange}
              className="rounded-md border border-slate-300 px-3 py-2 focus:border-slate-500 focus:outline-none"
            />
          </label>
          {errorMessage ? (
            <p className="text-sm text-rose-500">{errorMessage}</p>
          ) : null}
          <button
            type="submit"
            disabled={isSubmitting}
            className="rounded-md bg-slate-900 px-4 py-2 text-sm font-medium text-white transition hover:bg-slate-700 disabled:cursor-not-allowed disabled:bg-slate-400"
          >
            {isSubmitting ? "로그인 중" : "로그인"}
          </button>
          <p className="text-xs text-slate-500">
            계정이 없으신가요?{" "}
            <Link
              href="/signup"
              className="font-medium text-slate-700 underline hover:text-slate-900"
            >
              회원가입
            </Link>
          </p>
        </form>
        <figure className="overflow-hidden rounded-xl border border-slate-200">
          <Image
            src="https://picsum.photos/seed/login/640/640"
            alt="로그인"
            width={640}
            height={640}
            className="h-full w-full object-cover"
            priority
          />
        </figure>
      </div>
    </div>
  );
}

export default function LoginPage({ params }: LoginPageProps) {
  void params;

  return (
    <Suspense fallback={<div className="flex min-h-screen items-center justify-center">로딩 중...</div>}>
      <LoginForm />
    </Suspense>
  );
}
</file>

<file path="src/app/payment/fail/page.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { XCircle } from 'lucide-react';
import Link from 'next/link';

export default async function PaymentFailPage({
  searchParams,
}: {
  searchParams: Promise<{ message?: string }>;
}) {
  const params = await searchParams;
  const errorMessage = params.message || '결제 처리 중 오류가 발생했습니다';

  return (
    <div className="container mx-auto max-w-2xl px-4 py-16">
      <Card>
        <CardHeader className="text-center">
          <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-red-100">
            <XCircle className="h-10 w-10 text-red-600" />
          </div>
          <CardTitle className="text-2xl">결제에 실패했습니다</CardTitle>
          <CardDescription>
            {errorMessage}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-lg border border-amber-200 bg-amber-50 p-4 dark:border-amber-900 dark:bg-amber-950">
            <h3 className="mb-2 font-semibold text-amber-900 dark:text-amber-100">
              다음 사항을 확인해주세요
            </h3>
            <ul className="space-y-1 text-sm text-amber-800 dark:text-amber-200">
              <li>• 카드 정보가 올바른지 확인해주세요</li>
              <li>• 카드 한도가 충분한지 확인해주세요</li>
              <li>• 카드사에서 결제를 차단하지 않았는지 확인해주세요</li>
              <li>• 문제가 계속되면 다른 결제 수단을 시도해보세요</li>
            </ul>
          </div>
        </CardContent>
        <CardFooter className="flex gap-3">
          <Button asChild className="flex-1">
            <Link href="/subscription/upgrade">다시 시도하기</Link>
          </Button>
          <Button asChild variant="outline" className="flex-1">
            <Link href="/dashboard">대시보드로 이동</Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="src/app/signup/page.tsx">
"use client";

import { Suspense, useCallback, useEffect, useMemo, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter, useSearchParams } from "next/navigation";
import { getSupabaseBrowserClient } from "@/lib/supabase/browser-client";
import { useCurrentUser } from "@/features/auth/hooks/useCurrentUser";

const defaultFormState = {
  email: "",
  password: "",
  confirmPassword: "",
};

type SignupPageProps = {
  params: Promise<Record<string, never>>;
};

function SignupForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { isAuthenticated, refresh } = useCurrentUser();
  const [formState, setFormState] = useState(defaultFormState);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [infoMessage, setInfoMessage] = useState<string | null>(null);

  useEffect(() => {
    if (isAuthenticated) {
      const redirectedFrom = searchParams.get("redirectedFrom") ?? "/";
      router.replace(redirectedFrom);
    }
  }, [isAuthenticated, router, searchParams]);

  const isSubmitDisabled = useMemo(
    () =>
      !formState.email.trim() ||
      !formState.password.trim() ||
      formState.password !== formState.confirmPassword,
    [formState.confirmPassword, formState.email, formState.password]
  );

  const handleChange = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const { name, value } = event.target;
      setFormState((previous) => ({ ...previous, [name]: value }));
    },
    []
  );

  const handleSubmit = useCallback(
    async (event: React.FormEvent<HTMLFormElement>) => {
      event.preventDefault();
      setIsSubmitting(true);
      setErrorMessage(null);
      setInfoMessage(null);

      if (formState.password !== formState.confirmPassword) {
        setErrorMessage("비밀번호가 일치하지 않습니다.");
        setIsSubmitting(false);
        return;
      }

      const supabase = getSupabaseBrowserClient();

      try {
        const result = await supabase.auth.signUp({
          email: formState.email,
          password: formState.password,
        });

        if (result.error) {
          setErrorMessage(result.error.message ?? "회원가입에 실패했습니다.");
          setIsSubmitting(false);
          return;
        }

        await refresh();

        const redirectedFrom = searchParams.get("redirectedFrom") ?? "/";

        if (result.data.session) {
          router.replace(redirectedFrom);
          return;
        }

        setInfoMessage(
          "확인 이메일을 보냈습니다. 이메일 인증 후 로그인해 주세요."
        );
        router.prefetch("/login");
        setFormState(defaultFormState);
      } catch (error) {
        setErrorMessage("회원가입 처리 중 문제가 발생했습니다.");
      } finally {
        setIsSubmitting(false);
      }
    },
    [formState.confirmPassword, formState.email, formState.password, refresh, router, searchParams]
  );

  if (isAuthenticated) {
    return null;
  }

  return (
    <div className="mx-auto flex min-h-screen w-full max-w-4xl flex-col items-center justify-center gap-10 px-6 py-16">
      <header className="flex flex-col items-center gap-3 text-center">
        <h1 className="text-3xl font-semibold">회원가입</h1>
        <p className="text-slate-500">
          Supabase 계정으로 회원가입하고 프로젝트를 시작하세요.
        </p>
      </header>
      <div className="grid w-full gap-8 md:grid-cols-2">
        <form
          onSubmit={handleSubmit}
          className="flex flex-col gap-4 rounded-xl border border-slate-200 p-6 shadow-sm"
        >
          <label className="flex flex-col gap-2 text-sm text-slate-700">
            이메일
            <input
              type="email"
              name="email"
              autoComplete="email"
              required
              value={formState.email}
              onChange={handleChange}
              className="rounded-md border border-slate-300 px-3 py-2 focus:border-slate-500 focus:outline-none"
            />
          </label>
          <label className="flex flex-col gap-2 text-sm text-slate-700">
            비밀번호
            <input
              type="password"
              name="password"
              autoComplete="new-password"
              required
              value={formState.password}
              onChange={handleChange}
              className="rounded-md border border-slate-300 px-3 py-2 focus:border-slate-500 focus:outline-none"
            />
          </label>
          <label className="flex flex-col gap-2 text-sm text-slate-700">
            비밀번호 확인
            <input
              type="password"
              name="confirmPassword"
              autoComplete="new-password"
              required
              value={formState.confirmPassword}
              onChange={handleChange}
              className="rounded-md border border-slate-300 px-3 py-2 focus:border-slate-500 focus:outline-none"
            />
          </label>
          {errorMessage ? (
            <p className="text-sm text-rose-500">{errorMessage}</p>
          ) : null}
          {infoMessage ? (
            <p className="text-sm text-emerald-600">{infoMessage}</p>
          ) : null}
          <button
            type="submit"
            disabled={isSubmitting || isSubmitDisabled}
            className="rounded-md bg-slate-900 px-4 py-2 text-sm font-medium text-white transition hover:bg-slate-700 disabled:cursor-not-allowed disabled:bg-slate-400"
          >
            {isSubmitting ? "등록 중" : "회원가입"}
          </button>
          <p className="text-xs text-slate-500">
            이미 계정이 있으신가요?{" "}
            <Link
              href="/login"
              className="font-medium text-slate-700 underline hover:text-slate-900"
            >
              로그인으로 이동
            </Link>
          </p>
        </form>
        <figure className="overflow-hidden rounded-xl border border-slate-200">
          <Image
            src="https://picsum.photos/seed/signup/640/640"
            alt="회원가입"
            width={640}
            height={640}
            className="h-full w-full object-cover"
            priority
          />
        </figure>
      </div>
    </div>
  );
}

export default function SignupPage({ params }: SignupPageProps) {
  void params;

  return (
    <Suspense fallback={<div className="flex min-h-screen items-center justify-center">로딩 중...</div>}>
      <SignupForm />
    </Suspense>
  );
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

@plugin "@tailwindcss/typography";
@plugin "tailwindcss-animate";

@custom-variant dark (&:where(.dark, .dark *));

@utility container {
  margin-inline: auto;
  width: 100%;
  padding-inline: 2rem;
  @media (width >= 1400px) {
    max-width: 1400px;
  }
}

@theme {
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentcolor);
  }
}

@layer base {
  :root {
    /* Sophisticated Monochrome - Light Mode */
    --background: 0 0% 100%;
    --foreground: 0 0% 5%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 5%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 5%;

    /* Black Primary */
    --primary: 0 0% 10%;
    --primary-foreground: 0 0% 98%;

    /* Gray Secondary */
    --secondary: 0 0% 96%;
    --secondary-foreground: 0 0% 10%;

    /* Muted Grays */
    --muted: 0 0% 97%;
    --muted-foreground: 0 0% 45%;

    /* Accent - Charcoal */
    --accent: 0 0% 15%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 92%;
    --input: 0 0% 92%;
    --ring: 0 0% 10%;
    --radius: 0.5rem;

    /* Monochrome Chart Colors */
    --chart-1: 0 0% 20%;
    --chart-2: 0 0% 35%;
    --chart-3: 0 0% 50%;
    --chart-4: 0 0% 65%;
    --chart-5: 0 0% 80%;
  }

  .dark {
    /* Sophisticated Monochrome - Dark Mode */
    --background: 0 0% 8%;
    --foreground: 0 0% 96%;
    --card: 0 0% 11%;
    --card-foreground: 0 0% 96%;
    --popover: 0 0% 11%;
    --popover-foreground: 0 0% 96%;

    /* White Primary */
    --primary: 0 0% 96%;
    --primary-foreground: 0 0% 10%;

    /* Dark Gray Secondary */
    --secondary: 0 0% 18%;
    --secondary-foreground: 0 0% 96%;

    /* Muted Dark Grays */
    --muted: 0 0% 16%;
    --muted-foreground: 0 0% 60%;

    /* Accent - Light Gray */
    --accent: 0 0% 85%;
    --accent-foreground: 0 0% 10%;

    --destructive: 0 70% 55%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 18%;
    --input: 0 0% 18%;
    --ring: 0 0% 85%;

    /* Monochrome Chart Colors - Dark */
    --chart-1: 0 0% 80%;
    --chart-2: 0 0% 65%;
    --chart-3: 0 0% 50%;
    --chart-4: 0 0% 35%;
    --chart-5: 0 0% 20%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "kern" 1, "liga" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Subtle Gradient Background */
  body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      180deg,
      hsl(var(--muted)) 0%,
      hsl(var(--background)) 30%
    );
    pointer-events: none;
    z-index: -1;
  }

  /* Elegant Typography */
  h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
    letter-spacing: -0.02em;
  }

  /* Smooth Scrolling */
  html {
    scroll-behavior: smooth;
  }
}

/* Sophisticated Shadows & Effects */
@layer utilities {
  .elevated-card {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05),
                0 4px 6px rgba(0, 0, 0, 0.02);
  }

  .elevated-card:hover {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07),
                0 8px 12px rgba(0, 0, 0, 0.04);
    transition: box-shadow 0.2s ease-in-out;
  }

  .minimal-border {
    border: 1px solid hsl(var(--border));
  }

  .text-balance {
    text-wrap: balance;
  }

  .gradient-text {
    background: linear-gradient(135deg,
      hsl(var(--foreground)) 0%,
      hsl(var(--muted-foreground)) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
}
</file>

<file path="src/app/page.tsx">
import { HeroSection } from './components/HeroSection';
import { FeaturesSection } from './components/FeaturesSection';
import { PricingSection } from './components/PricingSection';
import { FAQSection } from './components/FAQSection';

export default function Home() {
  return (
    <main className="min-h-screen">
      <HeroSection />
      <FeaturesSection />
      <PricingSection />
      <FAQSection />
    </main>
  );
}
</file>

<file path="src/components/layout/Header.tsx">
'use client';

import { SignInButton, SignUpButton, SignedIn, SignedOut, UserButton } from '@clerk/nextjs';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export function Header() {
  const pathname = usePathname();
  const isHomePage = pathname === '/';

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between px-4">
        {/* Logo */}
        <Link href="/" className="flex items-center gap-2">
          <span className="text-xl font-bold">운명 계산기</span>
        </Link>

        {/* Center Navigation - Only on Home Page */}
        {isHomePage && (
          <nav className="hidden md:flex items-center gap-6">
            <button
              onClick={() => scrollToSection('home')}
              className="text-sm font-medium transition-colors hover:text-primary"
            >
              홈
            </button>
            <button
              onClick={() => scrollToSection('features')}
              className="text-sm font-medium transition-colors hover:text-primary"
            >
              서비스
            </button>
            <button
              onClick={() => scrollToSection('pricing')}
              className="text-sm font-medium transition-colors hover:text-primary"
            >
              가격
            </button>
            <button
              onClick={() => scrollToSection('faq')}
              className="text-sm font-medium transition-colors hover:text-primary"
            >
              FAQ
            </button>
          </nav>
        )}

        {/* Right Navigation */}
        <nav className="flex items-center gap-4">
          <SignedIn>
            <Button asChild variant="ghost" size="sm">
              <Link href="/dashboard">대시보드</Link>
            </Button>
            <Button asChild variant="ghost" size="sm">
              <Link href="/subscription">구독 관리</Link>
            </Button>
            <UserButton
              appearance={{
                elements: {
                  avatarBox: 'h-9 w-9',
                },
              }}
              afterSignOutUrl="/"
            />
          </SignedIn>

          <SignedOut>
            <SignInButton mode="modal">
              <Button variant="ghost" size="sm">로그인</Button>
            </SignInButton>
            <SignUpButton mode="modal">
              <Button size="sm">무료로 시작하기</Button>
            </SignUpButton>
          </SignedOut>
        </nav>
      </div>
    </header>
  );
}
</file>

<file path="src/components/layout/Sidebar.tsx">
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Home, Plus, Settings, User, Menu, X } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { useState } from 'react';

interface SidebarProps {
  userEmail?: string;
  subscriptionTier?: string;
}

export function Sidebar({ userEmail, subscriptionTier }: SidebarProps) {
  const pathname = usePathname();
  const [isOpen, setIsOpen] = useState(false);

  const navigation = [
    {
      name: '대시보드',
      href: '/dashboard',
      icon: Home,
    },
    {
      name: '새 검사',
      href: '/analysis/new',
      icon: Plus,
    },
  ];

  return (
    <>
      {/* Mobile Menu Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed left-4 top-4 z-50 rounded-lg bg-background p-2 shadow-lg border lg:hidden"
        aria-label="Toggle menu"
      >
        {isOpen ? (
          <X className="h-6 w-6" />
        ) : (
          <Menu className="h-6 w-6" />
        )}
      </button>

      {/* Overlay for mobile */}
      {isOpen && (
        <div
          className="fixed inset-0 z-40 bg-black/50 lg:hidden"
          onClick={() => setIsOpen(false)}
        />
      )}

      {/* Sidebar */}
      <aside
        className={cn(
          'fixed left-0 top-0 z-40 h-screen w-60 border-r bg-background transition-transform duration-300',
          'lg:translate-x-0',
          isOpen ? 'translate-x-0' : '-translate-x-full'
        )}
      >
        <div className="flex h-full flex-col">
          {/* Logo */}
          <div className="flex h-16 items-center border-b px-6">
            <Link href="/" className="flex items-center gap-2">
              <span className="text-xl font-bold text-primary">운명 계산기</span>
            </Link>
          </div>

          {/* Navigation */}
          <nav className="flex-1 space-y-1 px-3 py-4">
            {navigation.map((item) => {
              const isActive = pathname === item.href;
              return (
                <Link
                  key={item.name}
                  href={item.href}
                  onClick={() => setIsOpen(false)}
                  className={cn(
                    'flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-colors',
                    isActive
                      ? 'bg-primary text-primary-foreground'
                      : 'text-muted-foreground hover:bg-muted hover:text-foreground'
                  )}
                >
                  <item.icon className="h-5 w-5" />
                  {item.name}
                </Link>
              );
            })}
          </nav>

          {/* User Info */}
          <div className="border-t p-4">
            <div className="flex items-center gap-3">
              <div className="flex h-10 w-10 items-center justify-center rounded-full bg-primary/10">
                <User className="h-5 w-5 text-primary" />
              </div>
              <div className="flex-1 overflow-hidden">
                <p className="truncate text-sm font-medium">{userEmail || '사용자'}</p>
                <p className="text-xs text-muted-foreground">
                  요금제: {subscriptionTier === 'pro' ? 'Pro' : 'Free'}
                </p>
              </div>
            </div>
            <Button asChild variant="outline" size="sm" className="mt-3 w-full">
              <Link href="/subscription" onClick={() => setIsOpen(false)}>
                <Settings className="mr-2 h-4 w-4" />
                구독 관리
              </Link>
            </Button>
          </div>

          {/* Footer */}
          <div className="border-t p-4 text-center text-xs text-muted-foreground">
            © 2025 사주 분석 서비스
          </div>
        </div>
      </aside>
    </>
  );
}
</file>

<file path="src/constants/app.ts">
// Application-wide constants

// Subscription-related constants
export const SUBSCRIPTION = {
  FREE_ANALYSES_COUNT: 3,
  PRO_ANALYSES_COUNT: 10,
  PRO_PRICE: 3900,
  PRO_DURATION_DAYS: 30,
} as const;

// Model mapping by tier
export const MODEL_BY_TIER = {
  free: 'gemini-2.5-flash',
  pro: 'gemini-2.5-pro',
} as const;

// API timeouts (in milliseconds)
export const API_TIMEOUT = {
  GEMINI: 180000, // 180 seconds (3 minutes) - 사주 분석은 시간이 오래 걸림
  PAYMENT: 30000, // 30 seconds
} as const;
</file>

<file path="src/lib/gemini/client.ts">
import { GoogleGenerativeAI } from '@google/generative-ai';
import type { Gender } from '@/types/analysis';
import { generateSajuAnalysisPromptFree, generateSajuAnalysisPromptPro } from './prompts';
import { API_TIMEOUT } from '@/constants/app';

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY!);

export type GeminiModel = 'gemini-2.5-flash' | 'gemini-2.5-pro';

export interface GenerateSajuAnalysisInput {
  name: string;
  birthDate: string;
  birthTime?: string;
  isLunar: boolean;
  gender: Gender;
  additionalInfo?: string;
  model: GeminiModel;
}

/**
 * Generate Saju analysis using Gemini API
 * @param input - Analysis input including model selection
 * @returns Markdown-formatted Saju analysis result
 * @throws Error if API call fails or times out
 */
export async function generateSajuAnalysis(
  input: GenerateSajuAnalysisInput
): Promise<string> {
  // Generate prompt based on model (tier)
  // gemini-2.5-pro = Pro tier (detailed), gemini-2.5-flash = Free tier (simplified)
  const isPro = input.model === 'gemini-2.5-pro';
  const prompt = isPro
    ? generateSajuAnalysisPromptPro({
        name: input.name,
        birthDate: input.birthDate,
        birthTime: input.birthTime,
        isLunar: input.isLunar,
        gender: input.gender,
        additionalInfo: input.additionalInfo,
      })
    : generateSajuAnalysisPromptFree({
        name: input.name,
        birthDate: input.birthDate,
        birthTime: input.birthTime,
        isLunar: input.isLunar,
        gender: input.gender,
        additionalInfo: input.additionalInfo,
      });

  // Select model
  const model = genAI.getGenerativeModel({
    model: input.model,
  });

  try {
    // Create timeout promise
    const timeoutPromise = new Promise<never>((_, reject) => {
      setTimeout(() => {
        reject(new Error('Gemini API request timed out'));
      }, API_TIMEOUT.GEMINI);
    });

    // Generate content with timeout
    const resultPromise = model.generateContent(prompt);

    const result = await Promise.race([resultPromise, timeoutPromise]);
    const response = result.response;
    const text = response.text();

    if (!text || text.trim().length === 0) {
      throw new Error('Empty response from Gemini API');
    }

    return text;
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(`Gemini API error: ${error.message}`);
    }
    throw new Error('Unknown Gemini API error');
  }
}
</file>

<file path="src/lib/gemini/prompts.ts">
import type { Gender } from '@/types/analysis';

export interface SajuInput {
  name: string;
  birthDate: string;
  birthTime?: string;
  isLunar: boolean;
  gender: Gender;
  additionalInfo?: string;
}

// Free 요금제용 간소화된 프롬프트
export const generateSajuAnalysisPromptFree = (input: SajuInput): string => {
  const birthTimeInfo = input.birthTime ? `${input.birthTime}` : '출생시간 미상';
  const lunarSolarInfo = input.isLunar ? '음력' : '양력';

  return `당신은 사주 분석 전문가입니다. 다음 정보를 바탕으로 간단명료한 사주 분석을 제공해주세요.

**[고객 정보]**
- **이름**: ${input.name}
- **생년월일**: ${input.birthDate} (${lunarSolarInfo})
- **출생시간**: ${birthTimeInfo}
- **성별**: ${input.gender === 'male' ? '남성' : '여성'}
${input.additionalInfo ? `- **추가 요청**: ${input.additionalInfo}\n` : ''}

**[분석 항목]**

### 1. 📊 기본 사주 분석
- 사주팔자 구성 (천간, 지지)
- 오행 분포 및 균형
- 일간 특성

### 2. 🎯 성격 및 적성
- 핵심 성격 특성
- 강점 및 약점
- 추천 직업군

### 3. 💰 주요 운세
- 재물운
- 직업/학업운
- 연애/결혼운
- 건강운

### 4. 💡 실천 조언
- 생활 습관 개선 방향
- 주의할 점
- 개운법

**[형식]**
- 마크다운 형식
- 각 항목당 2-3 문단으로 간결하게 작성
- 긍정적이고 실용적인 어조
- 총 분량: A4 1장 정도

**[주의사항]**
- 확정적 미래 예측 금지
- 부정적 표현 자제
- 실천 가능한 조언 제공`;
};

// Pro 요금제용 상세 프롬프트
export const generateSajuAnalysisPromptPro = (input: SajuInput): string => {
  const birthTimeInfo = input.birthTime ? `${input.birthTime}` : '출생시간 미상 (미상 시 삼주(三柱) 기반 분석)';
  const lunarSolarInfo = input.isLunar ? '음력' : '양력';

  return `당신은 25년 경력의 동양 철학 전문가이자, 고객의 삶에 긍정적인 통찰을 제공하는 전문 사주 분석 컨설턴트입니다. 명리학(命理學)에 기반하여 개인의 잠재력을 발굴하고 현명한 선택을 돕는 것을 최우선으로 합니다.

**[고객 정보]**
- **이름**: ${input.name}
- **생년월일**: ${input.birthDate} (${lunarSolarInfo})
- **출생시간**: ${birthTimeInfo}
- **성별**: ${input.gender === 'male' ? '남성' : '여성'}
${input.additionalInfo ? `- **추가 요청/고민**: ${input.additionalInfo}\n` : ''}

**[분석 요청 사항]**

다음 각 섹션을 상세하고 전문적으로 분석하여 제공합니다. 각 섹션은 깊이 있는 설명을 포함하되, 고객이 이해하기 쉽도록 친절한 어조로 작성해 주세요.

---

### **1. 🌸 나의 원명(原命) 이해하기: 사주팔자(四柱八字)와 오행(五行) 분석**

*   **천간(天干)과 지지(地支) 구성**: 고객의 사주팔자(년, 월, 일, 시주)를 명확히 제시하고, 각 기둥의 의미와 상호 관계를 설명합니다.
*   **오행(五行)의 균형**: 목(木), 화(火), 토(土), 금(金), 수(水) 오행의 분포와 강약을 분석합니다. 특정 오행의 과다/부족이 고객의 타고난 성향과 에너지 흐름에 어떤 영향을 미치는지 설명합니다.
*   **일간(日干) 분석**: 고객의 일간(日干)이 무엇인지 밝히고, 일간이 상징하는 개인의 핵심적인 특성, 가치관, 강점 및 약점을 깊이 있게 해석합니다.
*   **십신(十神) 분석**: 비겁, 식상, 재성, 관성, 인성의 분포를 설명하고, 각 십신이 고객의 대인 관계, 직업적 특성, 재물관, 사회생활 등에 미치는 영향을 구체적인 사례를 들어 설명합니다.

---

### **2. 🌟 삶의 흐름 읽기: 대운(大運)과 세운(歲運) 해석**

*   **현재 대운(大運) 분석**: 현재 고객이 경험하고 있는 대운의 시작 시점과 주된 에너지 흐름을 설명합니다. 이 대운이 고객의 전반적인 삶의 방향성(직업, 관계, 환경 변화 등)에 어떤 영향을 미치는지 구체적으로 해석합니다.
*   **가까운 미래의 세운(歲運) 예측 (향후 3년)**: 다가올 3년간의 세운(歲運) 흐름을 년도별로 설명합니다. 각 세운이 고객의 재물운, 건강운, 연애운, 학업/직업운 등에 미칠 수 있는 영향을 예측하고, 기회와 주의할 점을 제시합니다.
*   **조언**: 변화하는 운의 흐름 속에서 고객이 취해야 할 현명한 태도와 준비 사항을 조언합니다.

---

### **3. 🌱 나의 잠재력 발휘하기: 종합 운세 분석 및 맞춤 솔루션**

*   **성격 및 적성 분석**: 타고난 기질과 잠재된 재능을 바탕으로 고객의 성격적 특성을 심층 분석하고, 어떤 분야나 활동에서 강점을 발휘할 수 있을지 적성에 대한 통찰을 제공합니다.
*   **재물운(財物運) 분석**: 재물을 모으고 유지하는 방식, 투자 성향, 재물과 관련된 기회 및 도전 요소를 분석하여 현명한 재테크 방향성을 제시합니다.
*   **직업/학업운(職業/學業運) 분석**: 타고난 직업적 특성, 성공적인 직업 선택을 위한 조언, 학업적 성취를 위한 방향성을 제시합니다. 이직, 승진, 창업 등 직업적 고민에 대한 통찰을 제공합니다.
*   **연애/결혼운(戀愛/結婚運) 분석**: 이상적인 배우자상, 연애 스타일, 관계에서 주의할 점 등을 분석하여 건강하고 행복한 관계를 위한 조언을 제공합니다. (미혼/기혼 여부와 관계없이 적용)
*   **건강운(健康運) 분석**: 오행의 불균형 또는 사주 내 특정 기운이 건강에 미칠 수 있는 영향을 분석하고, 예방 및 관리를 위한 생활 습관 개선 등 실질적인 조언을 제공합니다.
*   **종합 조언 및 개운법(開運法)**: 위 모든 분석을 종합하여 고객의 삶에 긍정적인 변화를 가져올 수 있는 맞춤형 개운법을 제시합니다. 이는 생활 습관, 마음가짐, 환경 조성 등 실천 가능한 형태로 구체화합니다.

---

**[출력 형식 및 어조]**

*   **형식**: 마크다운 (Markdown)
*   **어조**: 친절하고 전문적이며, 희망적이고 긍정적인 통찰을 제공하는 컨설턴트의 어조를 유지합니다. 애매모호한 표현보다는 구체적이고 실질적인 조언을 제공합니다.
*   **분량**: 각 섹션별로 충분한 설명과 예시를 포함하여 최소 A4 용지 2장 이상의 상세한 분석을 제공합니다.

**[금지 사항 및 주의사항]**

*   **의료·법률·금융 관련 확정적 조언 금지**: 사주 분석은 참고 자료이며, 전문 분야의 조언을 대체할 수 없습니다.
*   **확정적 미래 예측 금지**: '반드시 ~할 것이다'와 같은 확정적인 미래 예측은 지양하고, '잠재력이 있습니다', '~하는 경향이 있습니다', '~할 가능성이 높습니다'와 같은 조심스러운 표현을 사용합니다.
*   **부정적·공격적·비난조의 표현 금지**: 고객에게 불쾌감을 주거나 위협적인 표현은 절대 사용하지 않습니다. 항상 긍정적이고 건설적인 방향으로 안내합니다.
*   **운명론적 접근 지양**: 운명은 고정된 것이 아니라 노력과 선택에 따라 변화할 수 있다는 점을 강조하며, 고객의 주체적인 삶을 응원하는 방식으로 조언합니다.
*   **과도한 미신적 요소 강조 금지**: 명리학적 원리에 기반하되, 일반인이 이해하기 어려운 과도한 미신적 설명을 자제합니다.

---

**[분석 결과 마무리]**

"이 분석이 고객님의 삶의 지혜와 긍정적인 변화를 위한 소중한 나침반이 되기를 바랍니다. 궁금한 점이 있다면 언제든지 다시 문의해 주세요."와 같은 격려의 메시지로 마무리합니다.
`;
};
</file>

<file path="src/lib/supabase/queries.ts">
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';
import type { User, SubscriptionStatus } from '@/types/user';
import type { Analysis } from '@/types/analysis';
import type { BillingKey } from '@/types/payment';
import { calculateSubscriptionStatus } from '@/utils/subscription';

type SupabaseClientType = SupabaseClient<Database>;

/**
 * Get user by Clerk user ID
 * @param supabase - Supabase client
 * @param clerkUserId - Clerk user ID
 * @returns User object or null if not found
 */
export async function getUserByClerkId(
  supabase: SupabaseClientType,
  clerkUserId: string
): Promise<User | null> {
  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('clerk_user_id', clerkUserId)
    .maybeSingle();

  if (error) {
    console.error('Error fetching user:', error);
    return null;
  }

  return data as User | null;
}

/**
 * Get subscription status for a user
 * @param supabase - Supabase client
 * @param userId - User ID (Supabase UUID)
 * @returns Subscription status
 */
export async function getSubscriptionStatus(
  supabase: SupabaseClientType,
  userId: string
): Promise<SubscriptionStatus | null> {
  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .maybeSingle();

  if (error) {
    console.error('Error fetching subscription status:', error);
    return null;
  }

  if (!data) {
    return null;
  }

  return calculateSubscriptionStatus(data as User);
}

export interface GetAnalysesOptions {
  limit?: number;
  offset?: number;
  search?: string;
}

/**
 * Get user's analyses with optional pagination and search
 * @param supabase - Supabase client
 * @param userId - User ID
 * @param options - Query options (limit, offset, search)
 * @returns Array of analyses
 */
export async function getUserAnalyses(
  supabase: SupabaseClientType,
  userId: string,
  options?: GetAnalysesOptions
): Promise<Analysis[]> {
  let query = supabase
    .from('analyses')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false });

  // Apply search filter
  if (options?.search) {
    query = query.ilike('name', `%${options.search}%`);
  }

  // Apply pagination
  if (options?.limit) {
    query = query.limit(options.limit);
  }
  if (options?.offset) {
    query = query.range(
      options.offset,
      options.offset + (options.limit || 10) - 1
    );
  }

  const { data, error } = await query;

  if (error) {
    console.error('Error fetching analyses:', error);
    return [];
  }

  return (data as Analysis[]) || [];
}

/**
 * Get analysis by ID (with user verification)
 * @param supabase - Supabase client
 * @param analysisId - Analysis ID
 * @param userId - User ID for verification
 * @returns Analysis object or null
 */
export async function getAnalysisById(
  supabase: SupabaseClientType,
  analysisId: string,
  userId: string
): Promise<Analysis | null> {
  const { data, error } = await supabase
    .from('analyses')
    .select('*')
    .eq('id', analysisId)
    .eq('user_id', userId)
    .maybeSingle();

  if (error) {
    console.error('Error fetching analysis:', error);
    return null;
  }

  return data as Analysis | null;
}

/**
 * Get billing key for a user
 * @param supabase - Supabase client
 * @param userId - User ID
 * @returns Billing key object or null
 */
export async function getBillingKey(
  supabase: SupabaseClientType,
  userId: string
): Promise<BillingKey | null> {
  const { data, error } = await supabase
    .from('billing_keys')
    .select('*')
    .eq('user_id', userId)
    .maybeSingle();

  if (error) {
    console.error('Error fetching billing key:', error);
    return null;
  }

  return data as BillingKey | null;
}

/**
 * Get users with subscriptions due today for recurring payment
 * @param supabase - Supabase client (must have service role key)
 * @returns Array of users with billing keys
 */
export async function getUsersDueForPayment(
  supabase: SupabaseClientType
): Promise<Array<User & { billing_key: string }>> {
  const { data, error } = await supabase.rpc('get_users_due_for_payment');

  if (error) {
    console.error('Error fetching users due for payment:', error);
    return [];
  }

  return data || [];
}
</file>

<file path="src/lib/supabase/server.ts">
import 'server-only';

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';

export async function createClient() {
  const cookieStore = await cookies();

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      'Supabase 환경 변수가 설정되지 않았습니다. .env.local 파일을 확인하세요.'
    );
  }

  return createServerClient(supabaseUrl, supabaseKey, {
    cookies: {
      getAll() {
        return cookieStore.getAll();
      },
      setAll(cookiesToSet) {
        try {
          cookiesToSet.forEach(({ name, value, options }) =>
            cookieStore.set(name, value, options)
          );
        } catch {
          // The `setAll` method was called from a Server Component.
          // This can be ignored if you have middleware refreshing
          // user sessions.
        }
      },
    },
  });
}

export async function createPureClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      'Supabase 환경 변수가 설정되지 않았습니다. .env.local 파일을 확인하세요.'
    );
  }

  return createServerClient(supabaseUrl, supabaseKey, {
    cookies: {
      getAll() {
        return [];
      },
      setAll() {},
    },
  });
}
</file>

<file path="supabase/migrations/0003_insert_test_user.sql">
-- Manual user insertion for testing
-- Replace the values below with your actual Clerk user information

-- Example:
-- clerk_user_id: 'user_2abc123xyz456' (get this from http://localhost:3001/test-user-id)
-- email: 'your-email@gmail.com'
-- first_name: '홍길동'

INSERT INTO public.users (
  clerk_user_id,
  email,
  first_name,
  subscription_tier,
  analyses_remaining,
  created_at,
  updated_at
)
VALUES (
  'user_34Z1qeInYY6Mv98dl6Tj9P1Jqfx',  -- ← http://localhost:3001/test-user-id에서 확인한 ID로 교체
  'lovepaul98@gmail.com',        -- ← 본인 이메일로 교체
  '로미오',                      -- ← 본인 이름으로 교체
  'free',
  3,
  NOW(),
  NOW()
)
ON CONFLICT (clerk_user_id) DO UPDATE SET
  email = EXCLUDED.email,
  first_name = EXCLUDED.first_name,
  updated_at = NOW();

-- 삽입된 사용자 확인
SELECT
  id,
  clerk_user_id,
  email,
  first_name,
  subscription_tier,
  analyses_remaining,
  created_at
FROM public.users
ORDER BY created_at DESC
LIMIT 5;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "strictNullChecks": false,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noImplicitAny": false,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-env.d.ts",
    ".next-dev/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path=".ruler/ruler.toml">
# Ruler Configuration File
# See https://ai.intellectronica.net/ruler for documentation.

# To specify which agents are active by default when --agents is not used,
# uncomment and populate the following line. If omitted, all agents are active.
default_agents = ["cursor", "codex", "claude"]

# Enable nested rule loading from nested .ruler directories
# When enabled, ruler will search for and process .ruler directories throughout the project hierarchy
# nested = false

# --- Agent Specific Configurations ---
# You can enable/disable agents and override their default output paths here.
# Use lowercase agent identifiers: amp, copilot, claude, codex, cursor, windsurf, cline, aider, kilocode

# [agents.copilot]
# enabled = true
# output_path = ".github/copilot-instructions.md"

# [agents.aider]
# enabled = true
# output_path_instructions = "AGENTS.md"
# output_path_config = ".aider.conf.yml"

# [agents.gemini-cli]
# enabled = true

# --- MCP Servers ---
# Define Model Context Protocol servers here. Two examples:
# 1. A stdio server (local executable)
# 2. A remote server (HTTP-based)

# [mcp_servers.example_stdio]
# command = "node"
# args = ["scripts/your-mcp-server.js"]
# env = { API_KEY = "replace_me" }

# [mcp_servers.example_remote]
# url = "https://api.example.com/mcp"
# headers = { Authorization = "Bearer REPLACE_ME" }

[mcp_servers.playwright]
command = "npx"
args = ["@playwright/mcp@latest"]

[mcp_servers.chrome-devtools]
command = "npx"
args = ["chrome-devtools-mcp@latest"]
</file>

<file path="src/app/(protected)/analysis/new/page.tsx">
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';
import { AnalysisForm } from './components/AnalysisForm';

export default async function NewAnalysisPage() {
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  const supabase = await createClient();
  const user = await getUserByClerkId(supabase, userId);

  if (!user) {
    redirect('/dashboard');
  }

  // Check if user has analyses remaining
  if (user.analyses_remaining <= 0) {
    redirect('/subscription/upgrade');
  }

  return (
    <div className="container mx-auto max-w-2xl px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">새 사주 분석</h1>
        <p className="mt-2 text-muted-foreground">
          정보를 입력하시면 AI가 상세한 사주 분석을 제공합니다
        </p>
        <p className="mt-1 text-sm text-muted-foreground">
          남은 분석 횟수: {user.analyses_remaining}회
        </p>
      </div>

      <AnalysisForm userId={user.id} />
    </div>
  );
}
</file>

<file path="src/app/(protected)/dashboard/components/AnalysisCard.tsx">
'use client';

import { Card, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import type { Analysis } from '@/types/analysis';
import { formatDate, formatRelativeTime } from '@/utils/date';
import { User, Calendar } from 'lucide-react';
import { useRouter } from 'next/navigation';

interface AnalysisCardProps {
  analysis: Analysis;
}

export function AnalysisCard({ analysis }: AnalysisCardProps) {
  const router = useRouter();

  const genderIcon = analysis.gender === 'male' ? '남성' : '여성';
  const modelBadge = analysis.model_used === 'pro' ? 'Pro' : 'Flash';

  return (
    <Card
      className="cursor-pointer transition-colors hover:bg-accent/50"
      onClick={() => router.push(`/analysis/${analysis.id}`)}
    >
      <CardHeader>
        <div className="flex items-start justify-between">
          <CardTitle className="text-xl">{analysis.name}</CardTitle>
          <Badge variant={analysis.model_used === 'pro' ? 'default' : 'secondary'}>
            {modelBadge}
          </Badge>
        </div>
        <CardDescription className="space-y-1">
          <div className="flex flex-wrap items-center gap-2 text-sm">
            <div className="flex items-center gap-1">
              <User className="h-4 w-4" />
              <span>{genderIcon}</span>
            </div>
            <span className="text-muted-foreground">|</span>
            <div className="flex items-center gap-1">
              <Calendar className="h-4 w-4" />
              <span>{formatDate(analysis.birth_date)}</span>
            </div>
            {analysis.birth_time && (
              <span className="text-muted-foreground">({analysis.birth_time})</span>
            )}
          </div>
          <div className="text-xs">
            {formatRelativeTime(analysis.created_at)} 분석
          </div>
        </CardDescription>
      </CardHeader>
    </Card>
  );
}
</file>

<file path="src/app/(protected)/layout.tsx">
import { type ReactNode } from 'react';
import { auth, currentUser } from '@clerk/nextjs/server';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId } from '@/lib/supabase/queries';
import { Sidebar } from '@/components/layout/Sidebar';

type ProtectedLayoutProps = {
  children: ReactNode;
};

export default async function ProtectedLayout({ children }: ProtectedLayoutProps) {
  // Get user info for sidebar
  const { userId } = await auth();
  const clerkUser = await currentUser();

  let userEmail = clerkUser?.emailAddresses[0]?.emailAddress;
  let subscriptionTier = 'free';

  if (userId) {
    const supabase = await createClient();
    const user = await getUserByClerkId(supabase, userId);
    if (user) {
      userEmail = user.email;
      subscriptionTier = user.subscription_tier;
    }
  }

  return (
    <div className="flex h-screen overflow-hidden">
      <Sidebar userEmail={userEmail} subscriptionTier={subscriptionTier} />
      <main className="flex-1 overflow-y-auto lg:ml-60">
        {children}
      </main>
    </div>
  );
}
</file>

<file path="src/app/components/HeroSection.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';
import { useAuth } from '@clerk/nextjs';

export function HeroSection() {
  const router = useRouter();
  const { isSignedIn } = useAuth();

  return (
    <section id="home" className="container mx-auto px-4 py-20 text-center scroll-mt-16">
      <div className="mx-auto max-w-3xl space-y-6">
        <h1 className="text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl">
          운명 계산기
        </h1>
        <div className="space-y-4">
          <p className="text-xl text-muted-foreground">
            운명을 믿기 전에, AI로 먼저 계산하세요.
          </p>
          <p className="text-base text-muted-foreground">
            천간지지 124,416가지 조합을 데이터로 분석합니다.
          </p>
          <p className="text-base text-muted-foreground">
            당신의 사주에 숨겨진 패턴을 찾아드립니다.
          </p>
        </div>
        <div className="flex justify-center gap-4 pt-4">
          {isSignedIn ? (
            <Button
              size="lg"
              onClick={() => router.push('/dashboard')}
            >
              대시보드로 이동
            </Button>
          ) : (
            <Button
              size="lg"
              onClick={() => router.push('/sign-up')}
            >
              무료로 시작하기
            </Button>
          )}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/constants/env.ts">
import { z } from 'zod';

const clientEnvSchema = z.object({
  NEXT_PUBLIC_SUPABASE_URL: z.string().url().optional(),
  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1).optional(),
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1).optional(),
  NEXT_PUBLIC_TOSS_PAYMENTS_CLIENT_KEY: z.string().min(1).optional(),
});

const serverEnvSchema = z.object({
  // Supabase
  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1).optional(),

  // Clerk
  CLERK_SECRET_KEY: z.string().min(1).optional(),
  CLERK_WEBHOOK_SECRET: z.string().min(1).optional(),

  // Toss Payments
  TOSS_PAYMENTS_SECRET_KEY: z.string().min(1).optional(),
  TOSS_PAYMENTS_WEBHOOK_SECRET: z.string().min(1).optional(),

  // Gemini API
  GOOGLE_GEMINI_API_KEY: z.string().min(1).optional(),

  // Cron Job
  CRON_SECRET: z.string().min(1).optional(),
});

const _clientEnv = clientEnvSchema.safeParse({
  NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
  NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
  NEXT_PUBLIC_TOSS_PAYMENTS_CLIENT_KEY: process.env.NEXT_PUBLIC_TOSS_PAYMENTS_CLIENT_KEY,
});

const _serverEnv = serverEnvSchema.safeParse({
  SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,
  CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,
  CLERK_WEBHOOK_SECRET: process.env.CLERK_WEBHOOK_SECRET,
  TOSS_PAYMENTS_SECRET_KEY: process.env.TOSS_PAYMENTS_SECRET_KEY,
  TOSS_PAYMENTS_WEBHOOK_SECRET: process.env.TOSS_PAYMENTS_WEBHOOK_SECRET,
  GOOGLE_GEMINI_API_KEY: process.env.GOOGLE_GEMINI_API_KEY,
  CRON_SECRET: process.env.CRON_SECRET,
});

export type ClientEnv = z.infer<typeof clientEnvSchema>;
export type ServerEnv = z.infer<typeof serverEnvSchema>;

if (!_clientEnv.success) {
  console.warn('⚠️ 클라이언트 환경 변수 누락:', _clientEnv.error.flatten().fieldErrors);
  console.warn('일부 기능이 제한될 수 있습니다. .env.local 파일을 확인하세요.');
}

if (!_serverEnv.success) {
  console.warn('⚠️ 서버 환경 변수 누락:', _serverEnv.error.flatten().fieldErrors);
  console.warn('일부 기능이 제한될 수 있습니다. .env.local 파일을 확인하세요.');
}

export const env: ClientEnv = _clientEnv.success ? _clientEnv.data : {};
export const serverEnv: ServerEnv = _serverEnv.success ? _serverEnv.data : {};
</file>

<file path="src/schemas/analysis.ts">
import { z } from 'zod';

export const createAnalysisSchema = z.object({
  name: z.string().min(2, '이름은 최소 2자 이상이어야 합니다').max(50),
  birth_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, '올바른 날짜 형식이 아닙니다 (YYYY-MM-DD)'),
  birth_time: z.string().regex(/^\d{2}:\d{2}$/, '올바른 시간 형식이 아닙니다 (HH:MM)').optional().or(z.literal('')),
  is_lunar: z.boolean(),
  gender: z.enum(['male', 'female'], {
    errorMap: () => ({ message: '성별을 선택해주세요' }),
  }),
  additional_info: z.string().max(500, '추가 정보는 최대 500자까지 입력 가능합니다').optional(),
});

export type CreateAnalysisInput = z.infer<typeof createAnalysisSchema>;
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# EasyNext
.easynext
.next-dev

# typescript
*.tsbuildinfo
next-env.d.ts


# START Ruler Generated Files
/.codex/config.json
/.codex/config.json.bak
/.codex/config.toml
/.codex/config.toml.bak
/.cursor/mcp.json
/.cursor/mcp.json.bak
/.cursor/rules/ruler_cursor_instructions.mdc
/.cursor/rules/ruler_cursor_instructions.mdc.bak
/.mcp.json
/.mcp.json.bak
/AGENTS.md
/AGENTS.md.bak
/CLAUDE.md
/CLAUDE.md.bak
# END Ruler Generated Files
</file>

<file path="package.json">
{
  "name": "template",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.34.0",
    "@google/generative-ai": "^0.24.1",
    "@hookform/resolvers": "^4",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.6",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.58.0",
    "@tanstack/react-query": "^5",
    "axios": "^1.7.9",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4",
    "es-toolkit": "^1",
    "framer-motion": "^11",
    "hono": "^4.9.9",
    "lucide-react": "^0.469.0",
    "nanoid": "^5.1.6",
    "next": "15.1.0",
    "next-themes": "^0.4.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7",
    "react-markdown": "^10.1.0",
    "react-use": "^17",
    "server-only": "0.0.1",
    "svix": "^1.80.0",
    "ts-pattern": "^5",
    "zod": "^3",
    "zustand": "^4"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.13",
    "@tailwindcss/typography": "^0.5.10",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "dotenv": "^17.2.3",
    "eslint": "^9",
    "eslint-config-next": "15.1.0",
    "postcss": "^8",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^4.1.13",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  }
}
</file>

<file path="src/app/(protected)/analysis/new/components/AnalysisForm.tsx">
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { createAnalysisSchema } from '@/schemas/analysis';
import type { CreateAnalysisInput } from '@/schemas/analysis';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Loader2 } from 'lucide-react';

interface AnalysisFormProps {
  userId: string;
}

export function AnalysisForm({ userId }: AnalysisFormProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isValid },
  } = useForm<CreateAnalysisInput>({
    resolver: zodResolver(createAnalysisSchema),
    mode: 'onChange',
    defaultValues: {
      is_lunar: false,
      gender: 'male',
    },
  });

  const onSubmit = async (data: CreateAnalysisInput) => {
    setIsSubmitting(true);
    setError(null);

    try {
      const response = await fetch('/api/analyses/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '분석 생성에 실패했습니다');
      }

      const result = await response.json();
      router.push(`/analysis/${result.analysisId}`);
    } catch (err) {
      setError(err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다');
      setIsSubmitting(false);
    }
  };

  const birthTimeUnknown = watch('birth_time') === undefined;

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Card>
        <CardHeader>
          <CardTitle>사주 분석 정보 입력</CardTitle>
          <div className="mt-3 rounded-lg border border-blue-200 bg-blue-50 p-4">
            <p className="text-sm text-blue-900">
              <span className="font-semibold">예상 분석 시간:</span> 3~5분
            </p>
            <p className="mt-1 text-xs text-blue-700">
              AI가 정확한 사주 분석을 위해 신중하게 해석을 진행해야 하므로 다소 시간이 걸릴 수 있습니다.
            </p>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Name */}
          <div className="space-y-2">
            <Label htmlFor="name">이름 *</Label>
            <Input
              id="name"
              {...register('name')}
              placeholder="홍길동"
              disabled={isSubmitting}
            />
            {errors.name && (
              <p className="text-sm text-destructive">{errors.name.message}</p>
            )}
          </div>

          {/* Birth Date */}
          <div className="space-y-2">
            <Label htmlFor="birth_date">생년월일 *</Label>
            <Input
              id="birth_date"
              type="date"
              {...register('birth_date')}
              disabled={isSubmitting}
            />
            {errors.birth_date && (
              <p className="text-sm text-destructive">{errors.birth_date.message}</p>
            )}
          </div>

          {/* Lunar/Solar */}
          <div className="space-y-2">
            <Label>음력/양력 *</Label>
            <div className="flex gap-4">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  value="false"
                  {...register('is_lunar', {
                    setValueAs: (v) => v === 'true' || v === true,
                  })}
                  disabled={isSubmitting}
                  defaultChecked
                />
                <span>양력</span>
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  value="true"
                  {...register('is_lunar', {
                    setValueAs: (v) => v === 'true' || v === true,
                  })}
                  disabled={isSubmitting}
                />
                <span>음력</span>
              </label>
            </div>
          </div>

          {/* Birth Time */}
          <div className="space-y-2">
            <Label htmlFor="birth_time">출생시간 (선택)</Label>
            <Input
              id="birth_time"
              type="time"
              {...register('birth_time')}
              disabled={isSubmitting}
              placeholder="모름"
            />
            <p className="text-xs text-muted-foreground">
              출생시간을 모르시는 경우 비워두시면 삼주 기반 분석이 진행됩니다
            </p>
            {errors.birth_time && (
              <p className="text-sm text-destructive">{errors.birth_time.message}</p>
            )}
          </div>

          {/* Gender */}
          <div className="space-y-2">
            <Label>성별 *</Label>
            <div className="flex gap-4">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  value="male"
                  {...register('gender')}
                  disabled={isSubmitting}
                />
                <span>남성</span>
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  value="female"
                  {...register('gender')}
                  disabled={isSubmitting}
                />
                <span>여성</span>
              </label>
            </div>
            {errors.gender && (
              <p className="text-sm text-destructive">{errors.gender.message}</p>
            )}
          </div>

          {/* Additional Info */}
          <div className="space-y-2">
            <Label htmlFor="additional_info">추가 요청사항 (선택)</Label>
            <Textarea
              id="additional_info"
              {...register('additional_info')}
              placeholder="특별히 궁금한 점이나 집중적으로 봐주었으면 하는 부분을 적어주세요"
              rows={4}
              disabled={isSubmitting}
            />
            {errors.additional_info && (
              <p className="text-sm text-destructive">{errors.additional_info.message}</p>
            )}
          </div>

          {error && (
            <div className="rounded-lg border border-destructive bg-destructive/10 p-4">
              <p className="text-sm text-destructive">{error}</p>
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button
            type="submit"
            size="lg"
            className="w-full"
            disabled={isSubmitting || !isValid}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                AI가 분석 중입니다...
              </>
            ) : (
              '분석 시작'
            )}
          </Button>
        </CardFooter>
      </Card>
    </form>
  );
}
</file>

<file path="src/app/(protected)/dashboard/page.tsx">
import { auth, clerkClient } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';
import { createClient } from '@/lib/supabase/server';
import { getUserByClerkId, getUserAnalyses } from '@/lib/supabase/queries';
import { EmptyState } from './components/EmptyState';
import { AnalysesList } from './components/AnalysesList';

export default async function DashboardPage() {
  // Get authenticated user
  const { userId } = await auth();

  if (!userId) {
    redirect('/sign-in');
  }

  // Fetch user and analyses data
  const supabase = await createClient();
  let user = await getUserByClerkId(supabase, userId);

  // If user doesn't exist in Supabase, create them automatically
  if (!user) {
    try {
      const client = await clerkClient();
      const clerkUser = await client.users.getUser(userId);

      // Create user in Supabase
      const { data: newUser, error } = await supabase
        .from('users')
        .insert({
          clerk_user_id: userId,
          email: clerkUser.emailAddresses[0]?.emailAddress || `user_${userId}@clerk-migration.local`,
          first_name: clerkUser.firstName || null,
          subscription_tier: 'free',
          analyses_remaining: 3,
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating user in Supabase:', error);
        return (
          <div className="container mx-auto px-4 py-8">
            <div className="rounded-lg border border-destructive bg-destructive/10 p-6">
              <h2 className="text-lg font-semibold">계정 생성 중 오류가 발생했습니다</h2>
              <p className="mt-2 text-sm text-muted-foreground">
                페이지를 새로고침하거나 잠시 후 다시 시도해주세요.
              </p>
            </div>
          </div>
        );
      }

      user = newUser;
      console.log('✅ Migrated existing user to Supabase:', userId);
    } catch (error) {
      console.error('Error fetching Clerk user or creating in Supabase:', error);
      return (
        <div className="container mx-auto px-4 py-8">
          <div className="rounded-lg border border-destructive bg-destructive/10 p-6">
            <h2 className="text-lg font-semibold">계정을 불러오는 중입니다</h2>
            <p className="mt-2 text-sm text-muted-foreground">
              잠시 후 다시 시도해주세요. 문제가 계속되면 고객센터에 문의해주세요.
            </p>
          </div>
        </div>
      );
    }
  }

  const analyses = await getUserAnalyses(supabase, user.id, { limit: 100 });

  return (
    <div className="h-full">
      <div className="border-b bg-background px-8 py-6">
        <h1 className="text-2xl font-bold">대시보드</h1>
        <p className="mt-1 text-sm text-muted-foreground">
          과거에 수행한 사주팔자 검사 내역을 확인할 수 있습니다.
        </p>
      </div>

      <div className="p-8">
        {analyses.length === 0 ? (
          <EmptyState />
        ) : (
          <AnalysesList initialAnalyses={analyses} />
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next';
import { ClerkProvider } from '@clerk/nextjs';
import './globals.css';
import Providers from './providers';
import { Header } from '@/components/layout/Header';
import { Footer } from '@/components/layout/Footer';

export const metadata: Metadata = {
  title: '운명 계산기 - 운명을 믿기 전에, AI로 먼저 계산하세요',
  description: '천간지지 124,416가지 조합을 데이터로 분석합니다. 당신의 사주에 숨겨진 패턴을 찾아드립니다.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="ko" suppressHydrationWarning>
        <body className="antialiased font-sans flex min-h-screen flex-col">
          <Providers>
            <Header />
            <main className="flex-1">{children}</main>
            <Footer />
          </Providers>
        </body>
      </html>
    </ClerkProvider>
  );
}
</file>

<file path="src/middleware.ts">
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

const isPublicRoute = createRouteMatcher([
  '/',
  '/sign-in(.*)',
  '/sign-up(.*)',
  '/api/webhooks/clerk',
]);

export default clerkMiddleware(async (auth, request) => {
  if (!isPublicRoute(request)) {
    await auth.protect();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};
</file>

</files>
